#!/usr/bin/env python3
"""
üîí Teste de Integra√ß√£o Completa do Sistema de Autentica√ß√£o

Este script testa todo o fluxo de autentica√ß√£o:
1. Login b√°sico
2. Configura√ß√£o de 2FA
3. Login com 2FA  
4. Acesso a recursos protegidos
5. Gerenciamento de secrets
"""

import asyncio
import httpx
import json
import qrcode
from io import BytesIO
import base64
from datetime import datetime

# Configura√ß√£o do servidor
BASE_URL = "http://localhost:8000"

class AuthIntegrationTest:
    def __init__(self):
        self.base_url = BASE_URL
        self.token = None
        self.user_data = {
            "username": "admin",
            "password": "SECURE_PASSWORD_FROM_ENV"
        }
        
    async def test_complete_flow(self):
        """Testa o fluxo completo de autentica√ß√£o"""
        print("üîí TESTE DE INTEGRA√á√ÉO - SISTEMA DE AUTENTICA√á√ÉO")
        print("=" * 60)
        
        async with httpx.AsyncClient() as client:
            # 1. Testar health check
            await self._test_health_check(client)
            
            # 2. Testar login b√°sico
            await self._test_basic_login(client)
            
            # 3. Testar configura√ß√£o de 2FA
            await self._test_2fa_setup(client)
            
            # 4. Testar login com 2FA
            await self._test_2fa_login(client)
            
            # 5. Testar acesso a recursos protegidos
            await self._test_protected_resources(client)
            
            # 6. Testar gerenciamento de secrets
            await self._test_secrets_management(client)
            
            # 7. Testar rate limiting
            await self._test_rate_limiting(client)
            
        print("\nüéâ TESTE DE INTEGRA√á√ÉO CONCLU√çDO!")
        
    async def _test_health_check(self, client):
        """Testa se a API est√° funcionando"""
        print("\n1. üè• Testando Health Check...")
        
        try:
            response = await client.get(f"{self.base_url}/health")
            if response.status_code == 200:
                print("   ‚úÖ API est√° funcionando")
                data = response.json()
                print(f"   üìä Status: {data.get('status')}")
            else:
                print(f"   ‚ùå Erro: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erro de conex√£o: {e}")
            return False
        return True
        
    async def _test_basic_login(self, client):
        """Testa login b√°sico"""
        print("\n2. üîë Testando Login B√°sico...")
        
        try:
            response = await client.post(
                f"{self.base_url}/auth/login",
                json=self.user_data
            )
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                print("   ‚úÖ Login realizado com sucesso")
                print(f"   üé´ Token obtido: {self.token[:20]}...")
            else:
                print(f"   ‚ùå Erro no login: {response.status_code}")
                print(f"   üìù Resposta: {response.text}")
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
            
    async def _test_2fa_setup(self, client):
        """Testa configura√ß√£o de 2FA"""
        print("\n3. üîê Testando Configura√ß√£o de 2FA...")
        
        if not self.token:
            print("   ‚ö†Ô∏è Token n√£o dispon√≠vel, pulando teste")
            return
            
        headers = {"Authorization": f"Bearer {self.token}"}
        
        try:
            # Configurar 2FA
            response = await client.post(
                f"{self.base_url}/auth/2fa/setup",
                headers=headers
            )
            
            if response.status_code == 200:
                data = response.json()
                print("   ‚úÖ 2FA configurado com sucesso")
                print(f"   üîë Secret: {data.get('secret')}")
                print(f"   üì± QR Code dispon√≠vel: {bool(data.get('qr_code'))}")
                
                # Salvar dados do 2FA para pr√≥ximo teste
                self.totp_secret = data.get('secret')
                
            else:
                print(f"   ‚ùå Erro na configura√ß√£o: {response.status_code}")
                print(f"   üìù Resposta: {response.text}")
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
            
    async def _test_2fa_login(self, client):
        """Testa login com 2FA"""
        print("\n4. üîì Testando Login com 2FA...")
        
        if not hasattr(self, 'totp_secret'):
            print("   ‚ö†Ô∏è 2FA n√£o configurado, pulando teste")
            return
            
        try:
            # Simular c√≥digo TOTP (para teste, usar c√≥digo fixo)
            import pyotp
            totp = pyotp.TOTP(self.totp_secret)
            code = totp.now()
            
            response = await client.post(
                f"{self.base_url}/auth/2fa/verify",
                json={
                    "code": code,
                    "type": "totp"
                },
                headers={"Authorization": f"Bearer {self.token}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                print("   ‚úÖ 2FA verificado com sucesso")
                print(f"   üé´ Novo token: {data.get('access_token', 'N/A')[:20]}...")
            else:
                print(f"   ‚ùå Erro na verifica√ß√£o: {response.status_code}")
                print(f"   üìù Resposta: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
            
    async def _test_protected_resources(self, client):
        """Testa acesso a recursos protegidos"""
        print("\n5. üõ°Ô∏è Testando Recursos Protegidos...")
        
        if not self.token:
            print("   ‚ö†Ô∏è Token n√£o dispon√≠vel, pulando teste")
            return
            
        headers = {"Authorization": f"Bearer {self.token}"}
        
        try:
            # Testar status da autentica√ß√£o
            response = await client.get(
                f"{self.base_url}/auth/status",
                headers=headers
            )
            
            if response.status_code == 200:
                data = response.json()
                print("   ‚úÖ Acesso autorizado a recurso protegido")
                print(f"   üë§ Usu√°rio: {data.get('user', 'N/A')}")
                print(f"   üìä Status: {data.get('authenticated', False)}")
            else:
                print(f"   ‚ùå Acesso negado: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
            
    async def _test_secrets_management(self, client):
        """Testa gerenciamento de secrets"""
        print("\n6. üîê Testando Gerenciamento de Secrets...")
        
        if not self.token:
            print("   ‚ö†Ô∏è Token n√£o dispon√≠vel, pulando teste")
            return
            
        headers = {"Authorization": f"Bearer {self.token}"}
        
        try:
            # Listar secrets
            response = await client.get(
                f"{self.base_url}/secrets/list",
                headers=headers
            )
            
            if response.status_code == 200:
                data = response.json()
                print("   ‚úÖ Secrets listados com sucesso")
                print(f"   üìù Total de secrets: {len(data.get('secrets', []))}")
            else:
                print(f"   ‚ùå Erro ao listar: {response.status_code}")
                
            # Criar um secret de teste
            test_secret = {
                "secret_id": "test_secret",
                "secret_type": "api_key",
                "value": "test_value_123"
            }
            
            response = await client.post(
                f"{self.base_url}/secrets/create",
                json=test_secret,
                headers=headers
            )
            
            if response.status_code == 200:
                print("   ‚úÖ Secret criado com sucesso")
            else:
                print(f"   ‚ùå Erro ao criar: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
            
    async def _test_rate_limiting(self, client):
        """Testa rate limiting"""
        print("\n7. üö¶ Testando Rate Limiting...")
        
        try:
            # Fazer v√°rias requisi√ß√µes r√°pidas
            successful_requests = 0
            rate_limited_requests = 0
            
            for i in range(10):
                response = await client.get(f"{self.base_url}/health")
                if response.status_code == 200:
                    successful_requests += 1
                elif response.status_code == 429:
                    rate_limited_requests += 1
                    
            print(f"   ‚úÖ Requisi√ß√µes bem-sucedidas: {successful_requests}")
            print(f"   üö´ Requisi√ß√µes limitadas: {rate_limited_requests}")
            
            if rate_limited_requests > 0:
                print("   ‚úÖ Rate limiting est√° funcionando")
            else:
                print("   ‚ÑπÔ∏è Rate limiting n√£o ativado ou limite n√£o atingido")
                
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")


async def main():
    """Fun√ß√£o principal"""
    test = AuthIntegrationTest()
    await test.test_complete_flow()


if __name__ == "__main__":
    print("üöÄ Iniciando teste de integra√ß√£o...")
    print("‚ö†Ô∏è Certifique-se de que o servidor est√° rodando em http://localhost:8000")
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Teste interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro durante o teste: {e}")
