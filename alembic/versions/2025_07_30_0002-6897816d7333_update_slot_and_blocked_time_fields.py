"""update_slot_and_blocked_time_fields

Revision ID: 6897816d7333
Revises: 2566fe4639c3
Create Date: 2025-07-30 00:02:30.451508-03:00

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '6897816d7333'
down_revision = '2566fe4639c3'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('available_slots', sa.Column('date', sa.DateTime(timezone=True), nullable=False))
    op.add_column('available_slots', sa.Column('start_time', sa.DateTime(timezone=True), nullable=False))
    op.add_column('available_slots', sa.Column('end_time', sa.DateTime(timezone=True), nullable=False))
    op.add_column('available_slots', sa.Column('max_appointments', sa.Integer(), nullable=True))
    op.add_column('available_slots', sa.Column('current_appointments', sa.Integer(), nullable=True))
    op.drop_column('available_slots', 'slot_datetime')
    
    # Para blocked_times, primeiro adicionar colunas como nullable
    op.add_column('blocked_times', sa.Column('start_date', sa.DateTime(timezone=True), nullable=True))
    op.add_column('blocked_times', sa.Column('end_date', sa.DateTime(timezone=True), nullable=True))
    
    # Migrar dados existentes: usar start_time para start_date e end_time para end_date
    op.execute("""
        UPDATE blocked_times 
        SET start_date = start_time, end_date = end_time
        WHERE start_date IS NULL OR end_date IS NULL
    """)
    
    # Tornar as colunas NOT NULL apÃ³s migrar os dados
    op.alter_column('blocked_times', 'start_date', nullable=False)
    op.alter_column('blocked_times', 'end_date', nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('blocked_times', 'end_date')
    op.drop_column('blocked_times', 'start_date')
    op.add_column('available_slots', sa.Column('slot_datetime', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False))
    op.drop_column('available_slots', 'current_appointments')
    op.drop_column('available_slots', 'max_appointments')
    op.drop_column('available_slots', 'end_time')
    op.drop_column('available_slots', 'start_time')
    op.drop_column('available_slots', 'date')
    # ### end Alembic commands ###
