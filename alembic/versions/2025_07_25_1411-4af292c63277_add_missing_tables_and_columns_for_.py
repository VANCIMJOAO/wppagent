"""Add missing tables and columns for complete system

Revision ID: 4af292c63277
Revises: 001_initial
Create Date: 2025-07-25 14:11:53.068685-03:00

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '4af292c63277'
down_revision = '001_initial'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('businesses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('business_hours', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_businesses_id'), 'businesses', ['id'], unique=False)
    op.create_table('blocked_times',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('business_id', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('reason', sa.String(length=255), nullable=True),
    sa.Column('block_type', sa.String(length=20), nullable=True),
    sa.Column('is_recurring', sa.Boolean(), nullable=True),
    sa.Column('recurrence_pattern', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['business_id'], ['businesses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_blocked_times_id'), 'blocked_times', ['id'], unique=False)
    op.create_table('services',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('business_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('duration_minutes', sa.Integer(), nullable=True),
    sa.Column('price', sa.String(length=20), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['business_id'], ['businesses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_services_id'), 'services', ['id'], unique=False)
    
    # Inserir dados iniciais da empresa
    businesses_table = sa.table('businesses',
        sa.column('id', sa.Integer),
        sa.column('name', sa.String),
        sa.column('phone', sa.String),
        sa.column('email', sa.String),
        sa.column('address', sa.Text),
        sa.column('description', sa.Text)
    )
    
    op.bulk_insert(businesses_table, [
        {
            'id': 1,
            'name': 'Minha Empresa',
            'phone': '(11) 99999-9999',
            'email': 'contato@empresa.com',
            'address': 'Endereço da empresa',
            'description': 'Empresa de agendamentos via WhatsApp'
        }
    ])
    
    # Inserir serviços padrão
    services_table = sa.table('services',
        sa.column('id', sa.Integer),
        sa.column('business_id', sa.Integer),
        sa.column('name', sa.String),
        sa.column('description', sa.Text),
        sa.column('duration_minutes', sa.Integer),
        sa.column('price', sa.String),
        sa.column('is_active', sa.Boolean)
    )
    
    op.bulk_insert(services_table, [
        {
            'id': 1,
            'business_id': 1,
            'name': 'Serviço Geral',
            'description': 'Serviço padrão migrado do sistema anterior',
            'duration_minutes': 60,
            'price': 'R$ 50,00',
            'is_active': True
        }
    ])
    
    op.add_column('appointments', sa.Column('business_id', sa.Integer(), nullable=True))
    op.add_column('appointments', sa.Column('service_id', sa.Integer(), nullable=True))
    op.add_column('appointments', sa.Column('end_time', sa.DateTime(timezone=True), nullable=True))
    op.add_column('appointments', sa.Column('customer_notes', sa.Text(), nullable=True))
    op.add_column('appointments', sa.Column('admin_notes', sa.Text(), nullable=True))
    op.add_column('appointments', sa.Column('cancelled_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('appointments', sa.Column('cancellation_reason', sa.String(length=255), nullable=True))
    op.add_column('appointments', sa.Column('cancelled_by', sa.String(length=20), nullable=True))
    op.add_column('appointments', sa.Column('confirmed_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('appointments', sa.Column('confirmed_by', sa.String(length=20), nullable=True))
    op.add_column('appointments', sa.Column('price_at_booking', sa.String(length=20), nullable=True))
    
    # Atualizar appointments existentes com business_id e service_id padrão
    op.execute("UPDATE appointments SET business_id = 1, service_id = 1 WHERE business_id IS NULL")
    
    # Agora tornar as colunas NOT NULL
    op.alter_column('appointments', 'business_id', nullable=False)
    op.alter_column('appointments', 'service_id', nullable=False)
    
    op.create_foreign_key(None, 'appointments', 'businesses', ['business_id'], ['id'])
    op.create_foreign_key(None, 'appointments', 'services', ['service_id'], ['id'])
    op.drop_column('appointments', 'service')
    op.drop_constraint(op.f('users_wa_id_key'), 'users', type_='unique')
    op.drop_index(op.f('ix_users_wa_id'), table_name='users')
    op.create_index(op.f('ix_users_wa_id'), 'users', ['wa_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_wa_id'), table_name='users')
    op.create_index(op.f('ix_users_wa_id'), 'users', ['wa_id'], unique=False)
    op.create_unique_constraint(op.f('users_wa_id_key'), 'users', ['wa_id'])
    op.add_column('appointments', sa.Column('service', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'appointments', type_='foreignkey')
    op.drop_constraint(None, 'appointments', type_='foreignkey')
    op.drop_column('appointments', 'price_at_booking')
    op.drop_column('appointments', 'confirmed_by')
    op.drop_column('appointments', 'confirmed_at')
    op.drop_column('appointments', 'cancelled_by')
    op.drop_column('appointments', 'cancellation_reason')
    op.drop_column('appointments', 'cancelled_at')
    op.drop_column('appointments', 'admin_notes')
    op.drop_column('appointments', 'customer_notes')
    op.drop_column('appointments', 'end_time')
    op.drop_column('appointments', 'service_id')
    op.drop_column('appointments', 'business_id')
    op.drop_index(op.f('ix_services_id'), table_name='services')
    op.drop_table('services')
    op.drop_index(op.f('ix_blocked_times_id'), table_name='blocked_times')
    op.drop_table('blocked_times')
    op.drop_index(op.f('ix_businesses_id'), table_name='businesses')
    op.drop_table('businesses')
    # ### end Alembic commands ###
