"""add_admin_authentication_system

Revision ID: 115422716842
Revises: d08ef6b15ecb
Create Date: 2025-08-08 15:26:40.355431-03:00

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '115422716842'
down_revision = 'd08ef6b15ecb'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Criar tabela admin_users
    op.create_table('admin_users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(length=50), nullable=False),
        sa.Column('email', sa.String(length=255), nullable=False),
        sa.Column('password_hash', sa.String(length=255), nullable=False),
        sa.Column('full_name', sa.String(length=255), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('is_super_admin', sa.Boolean(), nullable=True),
        sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('email'),
        sa.UniqueConstraint('username')
    )
    op.create_index(op.f('ix_admin_users_email'), 'admin_users', ['email'], unique=False)
    op.create_index(op.f('ix_admin_users_id'), 'admin_users', ['id'], unique=False)
    op.create_index(op.f('ix_admin_users_username'), 'admin_users', ['username'], unique=False)

    # Criar tabela login_sessions
    op.create_table('login_sessions',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('session_token', sa.String(length=255), nullable=False),
        sa.Column('admin_user_id', sa.Integer(), nullable=False),
        sa.Column('ip_address', sa.String(length=45), nullable=True),
        sa.Column('user_agent', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(['admin_user_id'], ['admin_users.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('session_token')
    )
    op.create_index(op.f('ix_login_sessions_id'), 'login_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_login_sessions_session_token'), 'login_sessions', ['session_token'], unique=False)

    # Remover tabelas antigas se existirem
    try:
        op.drop_index(op.f('idx_business_policies_business_type'), table_name='business_policies', if_exists=True)
        op.drop_table('business_policies', if_exists=True)
    except:
        pass
    
    try:
        op.drop_index(op.f('idx_payment_methods_business'), table_name='payment_methods', if_exists=True)
        op.drop_table('payment_methods', if_exists=True)
    except:
        pass
    
    try:
        op.drop_index(op.f('idx_business_hours_business_day'), table_name='business_hours', if_exists=True)
        op.drop_table('business_hours', if_exists=True)
    except:
        pass
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('business_hours',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('business_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('day_of_week', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_open', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('open_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('close_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('break_start_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('break_end_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint('day_of_week >= 0 AND day_of_week <= 6', name=op.f('business_hours_day_of_week_check')),
    sa.ForeignKeyConstraint(['business_id'], ['businesses.id'], name=op.f('business_hours_business_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('business_hours_pkey')),
    comment='Horários de funcionamento do negócio por dia da semana'
    )
    op.create_index(op.f('idx_business_hours_business_day'), 'business_hours', ['business_id', 'day_of_week'], unique=False)
    op.create_table('payment_methods',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('business_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('additional_info', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['business_id'], ['businesses.id'], name=op.f('payment_methods_business_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('payment_methods_pkey')),
    comment='Formas de pagamento aceitas pelo negócio'
    )
    op.create_index(op.f('idx_payment_methods_business'), 'payment_methods', ['business_id', 'is_active'], unique=False)
    op.create_table('business_policies',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('business_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('policy_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('rules', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['business_id'], ['businesses.id'], name=op.f('business_policies_business_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('business_policies_pkey')),
    comment='Políticas do negócio (cancelamento, reagendamento, etc.)'
    )
    op.create_index(op.f('idx_business_policies_business_type'), 'business_policies', ['business_id', 'policy_type', 'is_active'], unique=False)
    # ### end Alembic commands ###
