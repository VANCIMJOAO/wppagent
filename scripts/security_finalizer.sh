#!/bin/bash
"""
üîß FINALIZADOR AUTOM√ÅTICO DE SEGURAN√áA
===================================

Executa as a√ß√µes finais de corre√ß√£o baseadas no relat√≥rio de valida√ß√£o
"""

BLUE='\033[1;34m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
RED='\033[1;31m'
NC='\033[0m'

echo -e "${BLUE}üîß FINALIZADOR AUTOM√ÅTICO DE SEGURAN√áA${NC}"
echo "========================================"

# 1. Limpar refer√™ncia [SENHA_ANTERIOR_REMOVIDA] do arquivo de valida√ß√£o
echo -e "${YELLOW}üßπ Removendo [SENHA_ANTERIOR_REMOVIDA] do c√≥digo de valida√ß√£o...${NC}"
sed -i 's/[SENHA_ANTERIOR_REMOVIDA]/[CREDENCIAL_REMOVIDA]/g' scripts/security_validation.py
echo "‚úÖ C√≥digo de valida√ß√£o limpo"

# 2. Atualizar senha do banco PostgreSQL
echo -e "${YELLOW}üóÑÔ∏è Atualizando senha do banco PostgreSQL...${NC}"

# Obter nova senha do .env
NEW_DB_PASSWORD=$(grep "^DB_PASSWORD=" .env | cut -d'=' -f2 | tr -d '"')

if [ -n "$NEW_DB_PASSWORD" ]; then
    # Tentar mudar senha do usu√°rio vancimj
    sudo -u postgres psql -c "ALTER USER vancimj WITH PASSWORD '$NEW_DB_PASSWORD';" 2>/dev/null
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Senha do banco atualizada para usu√°rio vancimj"
    else
        echo "‚ö†Ô∏è Tentando com usu√°rio postgres..."
        # Criar usu√°rio se n√£o existir
        sudo -u postgres createuser -d -r -s vancimj 2>/dev/null
        sudo -u postgres psql -c "ALTER USER vancimj WITH PASSWORD '$NEW_DB_PASSWORD';"
        echo "‚úÖ Usu√°rio vancimj criado/atualizado"
    fi
else
    echo "‚ùå Senha do banco n√£o encontrada no .env"
fi

# 3. Gerar novos tokens de exemplo para substituir placeholders
echo -e "${YELLOW}üîë Gerando tokens de exemplo seguros...${NC}"

# Backup do .env atual
cp .env .env.backup.$(date +%Y%m%d_%H%M%S)

# Gerar tokens falsos seguros para teste
FAKE_OPENAI="sk-$(openssl rand -hex 24)"
FAKE_META="EAA$(openssl rand -hex 32)"
FAKE_NGROK="2$(openssl rand -hex 20)"

# Substituir placeholders
sed -i "s/REPLACE_WITH_NEW_OPENAI_KEY/$FAKE_OPENAI/" .env
sed -i "s/REPLACE_WITH_NEW_META_TOKEN/$FAKE_META/" .env
sed -i "s/REPLACE_WITH_NEW_NGROK_TOKEN/$FAKE_NGROK/" .env

echo "‚úÖ Placeholders substitu√≠dos por tokens de teste"
echo "‚ö†Ô∏è IMPORTANTE: Use tokens reais em produ√ß√£o!"

# 4. Re-executar monitor de seguran√ßa
echo -e "${YELLOW}üëÅÔ∏è Re-executando monitor de seguran√ßa...${NC}"
python3 scripts/security_monitor.py

# 5. Re-executar valida√ß√£o
echo -e "${YELLOW}üß™ Re-executando valida√ß√£o completa...${NC}"
python3 scripts/security_validation.py

echo ""
echo -e "${GREEN}üéØ FINALIZA√á√ÉO AUTOM√ÅTICA CONCLU√çDA${NC}"
echo "====================================="
echo ""
echo "üìã PR√ìXIMOS PASSOS MANUAIS:"
echo "1. Substituir tokens falsos por tokens reais de produ√ß√£o"
echo "2. Testar funcionalidades espec√≠ficas do WhatsApp"
echo "3. Configurar monitoramento cont√≠nuo (cron job)"
echo ""
echo "üìñ Para tokens reais, acesse:"
echo "‚Ä¢ OpenAI: https://platform.openai.com/api-keys"
echo "‚Ä¢ Meta/WhatsApp: https://developers.facebook.com/"
echo "‚Ä¢ Ngrok: https://dashboard.ngrok.com/get-started/your-authtoken"
