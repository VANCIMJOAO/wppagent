#!/bin/bash

# ============================================================================
# üîí SCRIPT DE CONFIGURA√á√ÉO DE SEGURAN√áA - WhatsApp Agent
# ============================================================================
# 
# Este script configura o sistema completo de autentica√ß√£o e autoriza√ß√£o:
# 1. Revoga todos os tokens expostos
# 2. Configura secrets manager
# 3. For√ßa 2FA para admins
# 4. Implementa JWT com rota√ß√£o
# 5. Configura rate limiting rigoroso
# ============================================================================

set -e

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

log() {
    echo -e "${CYAN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

echo -e "${PURPLE}"
cat << "EOF"
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                              ‚ïë
    ‚ïë           üîí CONFIGURA√á√ÉO DE SEGURAN√áA AVAN√áADA              ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïë     Implementa√ß√£o completa de autentica√ß√£o e autoriza√ß√£o     ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# Fun√ß√£o principal
main() {
    log "üöÄ Iniciando configura√ß√£o de seguran√ßa..."
    
    # 1. Verificar pr√©-requisitos
    check_prerequisites
    
    # 2. Instalar depend√™ncias de seguran√ßa
    install_security_dependencies
    
    # 3. Configurar ambiente de seguran√ßa
    setup_security_environment
    
    # 4. Inicializar secrets manager
    initialize_secrets_manager
    
    # 5. Configurar rate limiting
    configure_rate_limiting
    
    # 6. For√ßar 2FA para admins
    enforce_2fa_for_admins
    
    # 7. Revogar tokens expostos
    revoke_exposed_tokens
    
    # 8. Configurar rota√ß√£o autom√°tica
    setup_automatic_rotation
    
    # 9. Configurar monitoramento de seguran√ßa
    setup_security_monitoring
    
    # 10. Validar configura√ß√£o
    validate_security_setup
    
    log "‚úÖ Configura√ß√£o de seguran√ßa conclu√≠da!"
    show_security_summary
}

check_prerequisites() {
    log "üîç Verificando pr√©-requisitos..."
    
    # Verificar Python
    if ! command -v python3 &> /dev/null; then
        error "Python 3 n√£o encontrado"
        exit 1
    fi
    
    # Verificar Redis
    if ! command -v redis-cli &> /dev/null; then
        warning "Redis CLI n√£o encontrado, tentando conectar via Docker..."
    fi
    
    # Verificar se estamos no diret√≥rio correto
    if [[ ! -f "requirements.txt" ]]; then
        error "Execute este script da raiz do projeto"
        exit 1
    fi
    
    success "Pr√©-requisitos verificados"
}

install_security_dependencies() {
    log "üì¶ Instalando depend√™ncias de seguran√ßa..."
    
    # Instalar depend√™ncias Python
    python3 -m pip install --upgrade pip
    python3 -m pip install -r requirements.txt
    
    # Verificar instala√ß√£o das depend√™ncias cr√≠ticas
    python3 -c "import PyJWT, cryptography, pyotp, qrcode; print('Depend√™ncias de seguran√ßa instaladas')"
    
    success "Depend√™ncias instaladas"
}

setup_security_environment() {
    log "‚öôÔ∏è Configurando ambiente de seguran√ßa..."
    
    # Criar diret√≥rio de secrets se n√£o existir
    mkdir -p secrets/security
    
    # Gerar chave mestre se n√£o existir
    if [[ ! -f "secrets/security/master.key" ]]; then
        python3 -c "
import secrets
import base64

# Gerar chave mestre de 256 bits
master_key = secrets.token_bytes(32)
encoded_key = base64.urlsafe_b64encode(master_key).decode()

with open('secrets/security/master.key', 'w') as f:
    f.write(encoded_key)

print(f'Chave mestre gerada: {encoded_key[:8]}...')
"
    fi
    
    # Configurar vari√°veis de ambiente de seguran√ßa
    cat >> .env.security << EOF
# Configura√ß√µes de Seguran√ßa
SECURITY_LEVEL=high
JWT_SECRET_ROTATION_HOURS=24
RATE_LIMITING_ENABLED=true
FORCE_2FA_FOR_ADMINS=true
AUTO_TOKEN_ROTATION=true
SECURITY_MONITORING=true

# Rate Limiting
MAX_REQUESTS_PER_MINUTE=100
MAX_AUTH_ATTEMPTS_PER_HOUR=10
MAX_ADMIN_REQUESTS_PER_MINUTE=50

# 2FA Settings
TOTP_ISSUER=WhatsApp Agent
BACKUP_CODES_COUNT=10
MAX_2FA_ATTEMPTS=5

# Token Settings
ACCESS_TOKEN_EXPIRE_MINUTES=15
REFRESH_TOKEN_EXPIRE_DAYS=7
ADMIN_TOKEN_EXPIRE_MINUTES=5
EOF

    success "Ambiente de seguran√ßa configurado"
}

initialize_secrets_manager() {
    log "üîê Inicializando Secrets Manager..."
    
    # Executar script de inicializa√ß√£o
    python3 << 'EOF'
import asyncio
import sys
sys.path.append('.')

from app.auth.secrets_manager import secrets_manager, SecretType

async def init_secrets():
    print("Inicializando secrets essenciais...")
    
    # Criar secrets essenciais
    secrets_to_create = [
        ("jwt_secret", SecretType.JWT_SECRET),
        ("webhook_secret", SecretType.WEBHOOK_SECRET),
        ("admin_api_key", SecretType.API_KEY),
        ("encryption_key", SecretType.ENCRYPTION_KEY)
    ]
    
    for secret_id, secret_type in secrets_to_create:
        try:
            existing = secrets_manager.get_secret(secret_id)
            if not existing:
                secret = secrets_manager.create_secret(secret_id, secret_type)
                print(f"‚úÖ Secret '{secret_id}' criado (vers√£o {secret.version})")
            else:
                print(f"‚ÑπÔ∏è  Secret '{secret_id}' j√° existe (vers√£o {existing.version})")
        except Exception as e:
            print(f"‚ùå Erro ao criar secret '{secret_id}': {e}")
    
    print("Secrets Manager inicializado!")

# Executar inicializa√ß√£o
asyncio.run(init_secrets())
EOF

    success "Secrets Manager inicializado"
}

configure_rate_limiting() {
    log "üö¶ Configurando Rate Limiting rigoroso..."
    
    # Testar configura√ß√£o de rate limiting
    python3 << 'EOF'
from app.auth.rate_limiter import rate_limiter
import json

print("Configura√ß√µes de Rate Limiting:")
print("================================")

# Exibir configura√ß√µes
limits = rate_limiter.limits
for limit_type, configs in limits.items():
    print(f"\n{limit_type.value.upper()}:")
    for endpoint, limit in configs.items():
        print(f"  {endpoint}: {limit.requests} req/{limit.window}s (block: {limit.block_duration}s)")

print("\n‚úÖ Rate Limiting configurado!")
EOF

    success "Rate Limiting configurado"
}

enforce_2fa_for_admins() {
    log "üîë Configurando 2FA obrigat√≥rio para admins..."
    
    # Configurar 2FA para usu√°rio admin padr√£o
    python3 << 'EOF'
from app.auth.two_factor import two_factor_auth

print("Configurando 2FA para administradores...")

# Verificar status do 2FA para admin
admin_user = "admin"
status = two_factor_auth.get_2fa_status(admin_user)

if not status["enabled"]:
    print(f"‚ö†Ô∏è  2FA n√£o configurado para {admin_user}")
    print("Execute o endpoint /auth/2fa/setup ap√≥s fazer login como admin")
else:
    print(f"‚úÖ 2FA j√° configurado para {admin_user}")

print("2FA obrigat√≥rio para admins ativado!")
EOF

    success "2FA obrigat√≥rio configurado"
}

revoke_exposed_tokens() {
    log "üö´ Revogando todos os tokens expostos..."
    
    # For√ßar rota√ß√£o do JWT secret para invalidar todos os tokens
    python3 << 'EOF'
from app.auth.secrets_manager import secrets_manager

try:
    # Rotacionar JWT secret (invalida todos os tokens)
    jwt_secret = secrets_manager.get_secret("jwt_secret")
    if jwt_secret:
        new_secret = secrets_manager.rotate_secret("jwt_secret")
        print(f"‚úÖ JWT Secret rotacionado: v{jwt_secret.version} ‚Üí v{new_secret.version}")
        print("üö´ TODOS os tokens JWT existentes foram invalidados")
    else:
        print("‚ùå JWT Secret n√£o encontrado")
        
    # Rotacionar outros secrets cr√≠ticos
    webhook_secret = secrets_manager.get_secret("webhook_secret")
    if webhook_secret:
        new_webhook = secrets_manager.rotate_secret("webhook_secret")
        print(f"‚úÖ Webhook Secret rotacionado: v{webhook_secret.version} ‚Üí v{new_webhook.version}")
        
except Exception as e:
    print(f"‚ùå Erro na rota√ß√£o: {e}")

print("Revoga√ß√£o de tokens conclu√≠da!")
EOF

    success "Tokens expostos revogados"
}

setup_automatic_rotation() {
    log "üîÑ Configurando rota√ß√£o autom√°tica de secrets..."
    
    # Criar script de rota√ß√£o autom√°tica
    cat > tools/rotate_secrets.py << 'EOF'
#!/usr/bin/env python3
"""
Script para rota√ß√£o autom√°tica de secrets
Execute este script via cron para rota√ß√£o regular
"""

import sys
sys.path.append('.')

from app.auth.secrets_manager import secrets_manager
from datetime import datetime

def main():
    print(f"üîÑ Iniciando rota√ß√£o autom√°tica - {datetime.now()}")
    
    # Rotacionar secrets expirados
    rotated = secrets_manager.auto_rotate_expired_secrets()
    
    if rotated:
        print(f"‚úÖ Secrets rotacionados: {rotated}")
    else:
        print("‚ÑπÔ∏è  Nenhum secret expirado encontrado")
    
    # Verificar secrets que expiram em breve
    expiring = secrets_manager.check_expiring_secrets(7)  # 7 dias
    
    if expiring:
        print(f"‚ö†Ô∏è  Secrets expirando em 7 dias: {len(expiring)}")
        for secret in expiring:
            print(f"   - {secret['id']} ({secret['type']}) - {secret['days_remaining']} dias")
    
    print("Rota√ß√£o autom√°tica conclu√≠da!")

if __name__ == "__main__":
    main()
EOF

    chmod +x tools/rotate_secrets.py
    
    # Configurar crontab (opcional)
    info "Para rota√ß√£o autom√°tica di√°ria, adicione ao crontab:"
    info "0 2 * * * cd /path/to/whats_agent && python3 tools/rotate_secrets.py"
    
    success "Rota√ß√£o autom√°tica configurada"
}

setup_security_monitoring() {
    log "üìä Configurando monitoramento de seguran√ßa..."
    
    # Criar script de monitoramento
    cat > tools/security_monitor.py << 'EOF'
#!/usr/bin/env python3
"""
Script de monitoramento de seguran√ßa
Verifica eventos de seguran√ßa e gera alertas
"""

import sys
sys.path.append('.')

from app.auth.rate_limiter import rate_limiter
from app.auth.secrets_manager import secrets_manager
from datetime import datetime

def main():
    print(f"üìä Relat√≥rio de Seguran√ßa - {datetime.now()}")
    print("=" * 50)
    
    # Eventos de seguran√ßa recentes
    events = rate_limiter.get_security_events(10)
    print(f"\nüö® Eventos de Seguran√ßa (√∫ltimos 10):")
    for event in events:
        print(f"  {event['timestamp']}: {event['type']} - {event['data']}")
    
    # Status dos secrets
    expiring = secrets_manager.check_expiring_secrets(30)  # 30 dias
    print(f"\nüîê Secrets Status:")
    print(f"  Expirando em 30 dias: {len(expiring)}")
    
    # Audit log recente
    audit = secrets_manager.get_audit_log(None, 5)
    print(f"\nüìù √öltimas a√ß√µes (5):")
    for entry in audit:
        print(f"  {entry['timestamp']}: {entry['action']} - {entry['secret_id']}")
    
    print("\nRelat√≥rio conclu√≠do!")

if __name__ == "__main__":
    main()
EOF

    chmod +x tools/security_monitor.py
    
    success "Monitoramento de seguran√ßa configurado"
}

validate_security_setup() {
    log "‚úÖ Validando configura√ß√£o de seguran√ßa..."
    
    # Executar valida√ß√£o completa
    python3 << 'EOF'
from app.auth.jwt_manager import jwt_manager
from app.auth.secrets_manager import secrets_manager
from app.auth.rate_limiter import rate_limiter
from app.auth.two_factor import two_factor_auth

print("Validando componentes de seguran√ßa...")
print("=" * 40)

# 1. Testar JWT Manager
try:
    token = jwt_manager.create_access_token("test_user", "user")
    payload = jwt_manager.verify_token(token)
    print("‚úÖ JWT Manager: OK")
except Exception as e:
    print(f"‚ùå JWT Manager: {e}")

# 2. Testar Secrets Manager
try:
    jwt_secret = secrets_manager.get_secret("jwt_secret")
    if jwt_secret:
        print("‚úÖ Secrets Manager: OK")
    else:
        print("‚ùå Secrets Manager: JWT secret n√£o encontrado")
except Exception as e:
    print(f"‚ùå Secrets Manager: {e}")

# 3. Testar 2FA
try:
    secret = two_factor_auth.generate_secret("test_user")
    if secret:
        print("‚úÖ 2FA System: OK")
    else:
        print("‚ùå 2FA System: Erro na gera√ß√£o de secret")
except Exception as e:
    print(f"‚ùå 2FA System: {e}")

# 4. Testar Rate Limiter
try:
    limits = rate_limiter.limits
    if limits:
        print("‚úÖ Rate Limiter: OK")
    else:
        print("‚ùå Rate Limiter: Configura√ß√µes n√£o encontradas")
except Exception as e:
    print(f"‚ùå Rate Limiter: {e}")

print("\nValida√ß√£o conclu√≠da!")
EOF

    success "Valida√ß√£o de seguran√ßa conclu√≠da"
}

show_security_summary() {
    echo
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë                    CONFIGURA√á√ÉO CONCLU√çDA                   ‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo
    echo -e "${GREEN}‚úÖ SISTEMA DE SEGURAN√áA CONFIGURADO COM SUCESSO!${NC}"
    echo
    echo -e "${CYAN}üîí Funcionalidades Implementadas:${NC}"
    echo "   ‚Ä¢ JWT com rota√ß√£o autom√°tica de secrets"
    echo "   ‚Ä¢ 2FA obrigat√≥rio para administradores"
    echo "   ‚Ä¢ Rate limiting rigoroso multi-camada"
    echo "   ‚Ä¢ Secrets Manager com auditoria completa"
    echo "   ‚Ä¢ Todos os tokens expostos revogados"
    echo
    echo -e "${CYAN}üìã Pr√≥ximos Passos:${NC}"
    echo "   1. Fazer login como admin em /auth/login"
    echo "   2. Configurar 2FA em /auth/2fa/setup"
    echo "   3. Verificar status em /auth/status"
    echo "   4. Monitorar seguran√ßa com tools/security_monitor.py"
    echo "   5. Configurar rota√ß√£o autom√°tica no cron"
    echo
    echo -e "${CYAN}üö® IMPORTANTE:${NC}"
    echo "   ‚Ä¢ Todos os tokens antigos foram invalidados"
    echo "   ‚Ä¢ 2FA √© obrigat√≥rio para opera√ß√µes administrativas"
    echo "   ‚Ä¢ Rate limiting est√° ativo - respeite os limites"
    echo "   ‚Ä¢ Monitore os logs de seguran√ßa regularmente"
    echo
    echo -e "${GREEN}üéâ SISTEMA PRONTO PARA PRODU√á√ÉO SEGURA!${NC}"
}

# Executar fun√ß√£o principal
main "$@"
