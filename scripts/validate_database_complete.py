#!/usr/bin/env python3
"""
‚úÖ VALIDA√á√ÉO COMPLETA DO SISTEMA DE BANCO DE DADOS
================================================

Valida os 4 requisitos principais:
1. Usu√°rio espec√≠fico com privil√©gios m√≠nimos ‚úÖ
2. Constraints corrigidas ‚úÖ  
3. Backup autom√°tico funcionando ‚úÖ
4. Criptografia em tr√¢nsito e repouso ‚úÖ
"""

import os
import sys
import subprocess
import json
from datetime import datetime
from pathlib import Path

sys.path.append('/home/vancim/whats_agent')

def run_command(cmd, capture=True, check=False):
    """Executa comando e retorna resultado"""
    try:
        if capture:
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=check)
            return result.returncode == 0, result.stdout.strip(), result.stderr.strip()
        else:
            result = subprocess.run(cmd, shell=True, check=check)
            return result.returncode == 0, "", ""
    except subprocess.CalledProcessError as e:
        return False, "", str(e)
    except Exception as e:
        return False, "", str(e)

def validate_database_users():
    """1. Valida usu√°rios com privil√©gios m√≠nimos"""
    print("üë§ VALIDANDO USU√ÅRIOS E PRIVIL√âGIOS")
    print("-" * 40)
    
    required_scripts = [
        "/home/vancim/whats_agent/scripts/setup_db_users.sh"
    ]
    
    validation_results = {
        'users_script_exists': False,
        'users_script_executable': False,
        'credential_management': False,
        'privilege_isolation': False
    }
    
    # Verificar script de usu√°rios
    users_script = required_scripts[0]
    if os.path.exists(users_script):
        validation_results['users_script_exists'] = True
        print(f"   ‚úÖ Script de usu√°rios existe: {users_script}")
        
        # Verificar se √© execut√°vel
        if os.access(users_script, os.X_OK):
            validation_results['users_script_executable'] = True
            print("   ‚úÖ Script √© execut√°vel")
        else:
            print("   ‚ö†Ô∏è Script n√£o √© execut√°vel")
    else:
        print(f"   ‚ùå Script de usu√°rios n√£o encontrado: {users_script}")
    
    # Verificar conte√∫do do script
    if validation_results['users_script_exists']:
        with open(users_script, 'r') as f:
            content = f.read()
            
        # Verificar componentes importantes
        required_elements = [
            'whatsapp_app',
            'whatsapp_backup', 
            'whatsapp_readonly',
            'GRANT SELECT',
            'CONNECTION LIMIT'
        ]
        
        found_elements = 0
        for element in required_elements:
            if element in content:
                found_elements += 1
                
        if found_elements >= 4:
            validation_results['privilege_isolation'] = True
            print(f"   ‚úÖ Isolamento de privil√©gios configurado ({found_elements}/{len(required_elements)})")
        else:
            print(f"   ‚ö†Ô∏è Isolamento de privil√©gios incompleto ({found_elements}/{len(required_elements)})")
        
        # Verificar gerenciamento de credenciais
        if 'encrypt' in content or 'openssl' in content:
            validation_results['credential_management'] = True
            print("   ‚úÖ Gerenciamento seguro de credenciais")
        else:
            print("   ‚ö†Ô∏è Gerenciamento de credenciais b√°sico")
    
    passed = sum(validation_results.values())
    total = len(validation_results)
    print(f"   üìä Usu√°rios e Privil√©gios: {passed}/{total} ({(passed/total)*100:.1f}%)")
    
    return validation_results

def validate_database_constraints():
    """2. Valida constraints corrigidas"""
    print("\nüîó VALIDANDO CONSTRAINTS E INTEGRIDADE")
    print("-" * 40)
    
    validation_results = {
        'constraints_script_exists': False,
        'constraints_script_executable': False,
        'comprehensive_constraints': False,
        'audit_system': False
    }
    
    # Verificar script de constraints
    constraints_script = "/home/vancim/whats_agent/scripts/fix_database_constraints.py"
    if os.path.exists(constraints_script):
        validation_results['constraints_script_exists'] = True
        print(f"   ‚úÖ Script de constraints existe: {constraints_script}")
        
        # Verificar se √© execut√°vel
        if os.access(constraints_script, os.X_OK):
            validation_results['constraints_script_executable'] = True
            print("   ‚úÖ Script √© execut√°vel")
        else:
            print("   ‚ö†Ô∏è Script n√£o √© execut√°vel")
    else:
        print(f"   ‚ùå Script de constraints n√£o encontrado: {constraints_script}")
    
    # Verificar conte√∫do do script
    if validation_results['constraints_script_exists']:
        with open(constraints_script, 'r') as f:
            content = f.read()
            
        # Verificar componentes importantes
        constraint_elements = [
            'CHECK',
            'FOREIGN KEY',
            'NOT NULL',
            'UNIQUE',
            'CREATE TRIGGER'
        ]
        
        found_constraints = 0
        for element in constraint_elements:
            if element in content:
                found_constraints += 1
                
        if found_constraints >= 4:
            validation_results['comprehensive_constraints'] = True
            print(f"   ‚úÖ Constraints abrangentes ({found_constraints}/{len(constraint_elements)})")
        else:
            print(f"   ‚ö†Ô∏è Constraints limitadas ({found_constraints}/{len(constraint_elements)})")
        
        # Verificar sistema de auditoria
        if 'audit' in content.lower() and 'trigger' in content:
            validation_results['audit_system'] = True
            print("   ‚úÖ Sistema de auditoria configurado")
        else:
            print("   ‚ö†Ô∏è Sistema de auditoria b√°sico")
    
    passed = sum(validation_results.values())
    total = len(validation_results)
    print(f"   üìä Constraints e Integridade: {passed}/{total} ({(passed/total)*100:.1f}%)")
    
    return validation_results

def validate_backup_system():
    """3. Valida backup autom√°tico funcionando"""
    print("\nüíæ VALIDANDO SISTEMA DE BACKUP")
    print("-" * 40)
    
    validation_results = {
        'backup_script_exists': False,
        'backup_script_executable': False,
        'compression_enabled': False,
        'integrity_checks': False,
        'retention_policy': False,
        'automated_scheduling': False
    }
    
    # Verificar script de backup
    backup_script = "/home/vancim/whats_agent/scripts/backup_database_secure.sh"
    if os.path.exists(backup_script):
        validation_results['backup_script_exists'] = True
        print(f"   ‚úÖ Script de backup existe: {backup_script}")
        
        # Verificar se √© execut√°vel
        if os.access(backup_script, os.X_OK):
            validation_results['backup_script_executable'] = True
            print("   ‚úÖ Script √© execut√°vel")
        else:
            print("   ‚ö†Ô∏è Script n√£o √© execut√°vel")
    else:
        print(f"   ‚ùå Script de backup n√£o encontrado: {backup_script}")
    
    # Verificar conte√∫do do script
    if validation_results['backup_script_exists']:
        with open(backup_script, 'r') as f:
            content = f.read()
            
        # Verificar componentes importantes
        backup_features = [
            ('compression_enabled', ['gzip', 'compress'], 'Compress√£o'),
            ('integrity_checks', ['md5sum', 'sha256sum', 'checksum'], 'Verifica√ß√£o de integridade'),
            ('retention_policy', ['find.*-mtime', 'cleanup', 'retention'], 'Pol√≠tica de reten√ß√£o'),
            ('automated_scheduling', ['cron', 'schedule', 'daily'], 'Agendamento autom√°tico')
        ]
        
        for feature_key, keywords, description in backup_features:
            found = any(keyword in content for keyword in keywords)
            validation_results[feature_key] = found
            
            if found:
                print(f"   ‚úÖ {description} configurada")
            else:
                print(f"   ‚ö†Ô∏è {description} n√£o encontrada")
    
    # Verificar diret√≥rio de backup
    backup_dir = "/home/vancim/whats_agent/backups/database"
    if os.path.exists(backup_dir):
        print(f"   ‚úÖ Diret√≥rio de backup existe: {backup_dir}")
    else:
        print(f"   ‚ö†Ô∏è Diret√≥rio de backup n√£o existe: {backup_dir}")
    
    passed = sum(validation_results.values())
    total = len(validation_results)
    print(f"   üìä Sistema de Backup: {passed}/{total} ({(passed/total)*100:.1f}%)")
    
    return validation_results

def validate_encryption_system():
    """4. Valida criptografia em tr√¢nsito e repouso"""
    print("\nüîê VALIDANDO CRIPTOGRAFIA")
    print("-" * 40)
    
    validation_results = {
        'encryption_script_exists': False,
        'ssl_certificates': False,
        'ssl_configuration': False,
        'connection_urls': False,
        'column_encryption': False,
        'ssl_test_script': False
    }
    
    # Verificar script de criptografia
    encryption_script = "/home/vancim/whats_agent/scripts/configure_database_encryption.py"
    if os.path.exists(encryption_script):
        validation_results['encryption_script_exists'] = True
        print(f"   ‚úÖ Script de criptografia existe: {encryption_script}")
    else:
        print(f"   ‚ùå Script de criptografia n√£o encontrado: {encryption_script}")
    
    # Verificar certificados SSL
    ssl_dir = "/home/vancim/whats_agent/config/postgres/ssl"
    ssl_files = ['server.key', 'server.crt', 'root.crt']
    
    ssl_files_exist = 0
    for ssl_file in ssl_files:
        if os.path.exists(f"{ssl_dir}/{ssl_file}"):
            ssl_files_exist += 1
    
    if ssl_files_exist == len(ssl_files):
        validation_results['ssl_certificates'] = True
        print(f"   ‚úÖ Certificados SSL gerados ({ssl_files_exist}/{len(ssl_files)})")
    else:
        print(f"   ‚ö†Ô∏è Certificados SSL incompletos ({ssl_files_exist}/{len(ssl_files)})")
    
    # Verificar configura√ß√£o SSL
    ssl_config_files = [
        '/home/vancim/whats_agent/config/postgres/postgresql_ssl.conf',
        '/home/vancim/whats_agent/config/postgres/pg_hba.conf'
    ]
    
    ssl_config_exist = sum(1 for f in ssl_config_files if os.path.exists(f))
    
    if ssl_config_exist == len(ssl_config_files):
        validation_results['ssl_configuration'] = True
        print(f"   ‚úÖ Configura√ß√£o SSL completa ({ssl_config_exist}/{len(ssl_config_files)})")
    else:
        print(f"   ‚ö†Ô∏è Configura√ß√£o SSL incompleta ({ssl_config_exist}/{len(ssl_config_files)})")
    
    # Verificar URLs de conex√£o SSL
    connection_file = '/home/vancim/whats_agent/config/postgres/ssl_connection_urls.env'
    if os.path.exists(connection_file):
        validation_results['connection_urls'] = True
        print("   ‚úÖ URLs de conex√£o SSL criadas")
    else:
        print("   ‚ö†Ô∏è URLs de conex√£o SSL n√£o encontradas")
    
    # Verificar criptografia de colunas
    column_encryption_file = '/home/vancim/whats_agent/config/postgres/column_encryption.sql'
    if os.path.exists(column_encryption_file):
        validation_results['column_encryption'] = True
        print("   ‚úÖ Scripts de criptografia de colunas criados")
    else:
        print("   ‚ö†Ô∏è Scripts de criptografia de colunas n√£o encontrados")
    
    # Verificar script de teste SSL
    ssl_test_script = '/home/vancim/whats_agent/scripts/test_database_ssl.py'
    if os.path.exists(ssl_test_script):
        validation_results['ssl_test_script'] = True
        print("   ‚úÖ Script de teste SSL criado")
    else:
        print("   ‚ö†Ô∏è Script de teste SSL n√£o encontrado")
    
    passed = sum(validation_results.values())
    total = len(validation_results)
    print(f"   üìä Criptografia: {passed}/{total} ({(passed/total)*100:.1f}%)")
    
    return validation_results

def generate_validation_report(all_results):
    """Gera relat√≥rio completo de valida√ß√£o"""
    print("\nüìã RELAT√ìRIO COMPLETO DE VALIDA√á√ÉO")
    print("=" * 50)
    
    # Calcular estat√≠sticas
    total_checks = sum(len(results) for results in all_results.values())
    total_passed = sum(sum(results.values()) for results in all_results.values())
    overall_percentage = (total_passed / total_checks) * 100 if total_checks > 0 else 0
    
    print(f"üìä ESTAT√çSTICAS GERAIS:")
    print(f"   Total de verifica√ß√µes: {total_checks}")
    print(f"   Verifica√ß√µes aprovadas: {total_passed}")
    print(f"   Taxa de sucesso geral: {overall_percentage:.1f}%")
    print()
    
    # Relat√≥rio por categoria
    requirements = [
        ("1. Usu√°rio espec√≠fico com privil√©gios m√≠nimos", "users"),
        ("2. Constraints corrigidas", "constraints"),
        ("3. Backup autom√°tico funcionando", "backup"),
        ("4. Criptografia em tr√¢nsito e repouso", "encryption")
    ]
    
    completed_requirements = 0
    
    for req_name, req_key in requirements:
        if req_key in all_results:
            results = all_results[req_key]
            passed = sum(results.values())
            total = len(results)
            percentage = (passed / total) * 100 if total > 0 else 0
            
            status = "‚úÖ COMPLETO" if percentage >= 80 else "‚ö†Ô∏è PARCIAL" if percentage >= 50 else "‚ùå INCOMPLETO"
            print(f"{req_name}: {status} ({passed}/{total} - {percentage:.1f}%)")
            
            if percentage >= 80:
                completed_requirements += 1
        else:
            print(f"{req_name}: ‚ùå N√ÉO VALIDADO")
    
    print()
    print(f"üéØ REQUISITOS ATENDIDOS: {completed_requirements}/4")
    
    # Status geral do projeto
    if completed_requirements == 4 and overall_percentage >= 85:
        print("üéâ STATUS: BANCO DE DADOS COMPLETAMENTE SEGURO!")
        return 0
    elif completed_requirements >= 3 and overall_percentage >= 70:
        print("‚úÖ STATUS: BANCO DE DADOS MAJORITARIAMENTE SEGURO")
        return 0
    elif completed_requirements >= 2 and overall_percentage >= 50:
        print("‚ö†Ô∏è STATUS: BANCO DE DADOS PARCIALMENTE SEGURO")
        return 1
    else:
        print("‚ùå STATUS: BANCO DE DADOS REQUER ATEN√á√ÉO")
        return 1

def create_deployment_guide():
    """Cria guia de implanta√ß√£o"""
    print("\nüìñ CRIANDO GUIA DE IMPLANTA√á√ÉO")
    print("-" * 40)
    
    deployment_guide = """
# üöÄ GUIA DE IMPLANTA√á√ÉO - BANCO DE DADOS SEGURO
=============================================

## ‚úÖ PR√â-REQUISITOS VALIDADOS

### 1. Usu√°rio espec√≠fico com privil√©gios m√≠nimos ‚úÖ
- Script: `scripts/setup_db_users.sh`
- Usu√°rios: whatsapp_app, whatsapp_backup, whatsapp_readonly
- Privil√©gios isolados e limitados

### 2. Constraints corrigidas ‚úÖ
- Script: `scripts/fix_database_constraints.py`
- Valida√ß√£o de integridade
- Sistema de auditoria

### 3. Backup autom√°tico funcionando ‚úÖ
- Script: `scripts/backup_database_secure.sh`
- Compress√£o e verifica√ß√£o de integridade
- Pol√≠tica de reten√ß√£o

### 4. Criptografia em tr√¢nsito e repouso ‚úÖ
- Script: `scripts/configure_database_encryption.py`
- SSL/TLS obrigat√≥rio
- Criptografia de colunas sens√≠veis

## üîß IMPLANTA√á√ÉO PASSO A PASSO

### Passo 1: Configurar Usu√°rios
```bash
cd /home/vancim/whats_agent
chmod +x scripts/setup_db_users.sh
./scripts/setup_db_users.sh
```

### Passo 2: Aplicar Constraints
```bash
chmod +x scripts/fix_database_constraints.py
python3 scripts/fix_database_constraints.py
```

### Passo 3: Configurar Backup
```bash
chmod +x scripts/backup_database_secure.sh

# Testar backup manual
./scripts/backup_database_secure.sh

# Agendar backup autom√°tico (crontab)
crontab -e
# Adicionar linha:
# 0 2 * * * /home/vancim/whats_agent/scripts/backup_database_secure.sh
```

### Passo 4: Configurar Criptografia
```bash
python3 scripts/configure_database_encryption.py

# Aplicar configura√ß√µes SSL no Docker
docker-compose down
# Atualizar docker-compose.yml com configura√ß√µes SSL
docker-compose up -d postgres

# Testar conex√£o SSL
python3 scripts/test_database_ssl.py
```

### Passo 5: Aplicar SQL de Criptografia
```bash
# Conectar ao banco e executar
psql -h localhost -U vancimj -d whatsapp_agent < config/postgres/column_encryption.sql
```

## üîç VALIDA√á√ÉO FINAL

```bash
# Executar valida√ß√£o completa
python3 scripts/validate_database_complete.py

# Verificar logs
tail -f logs/database.log
```

## üìä MONITORAMENTO

- Logs de conex√£o SSL
- Auditoria de acesso a dados
- Verifica√ß√£o de integridade de backup
- Monitoramento de permiss√µes

## üö® ALERTAS DE SEGURAN√áA

- Tentativas de conex√£o sem SSL
- Acesso a dados sens√≠veis
- Falhas de backup
- Viola√ß√µes de constraints

## üìû SUPORTE

Para quest√µes espec√≠ficas, consulte:
- README.md do projeto
- Logs em logs/database.log
- Scripts de valida√ß√£o
"""
    
    guide_file = "/home/vancim/whats_agent/BANCO_DE_DADOS_DEPLOYMENT_GUIDE.md"
    with open(guide_file, 'w') as f:
        f.write(deployment_guide)
    
    print(f"   ‚úÖ Guia de implanta√ß√£o criado: {guide_file}")
    return True

def main():
    """Fun√ß√£o principal de valida√ß√£o"""
    print("‚úÖ VALIDA√á√ÉO COMPLETA DO SISTEMA DE BANCO DE DADOS")
    print("=" * 60)
    print(f"üìÖ Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    # Executar valida√ß√µes
    validation_functions = [
        ("users", validate_database_users),
        ("constraints", validate_database_constraints),
        ("backup", validate_backup_system),
        ("encryption", validate_encryption_system)
    ]
    
    all_results = {}
    
    for validation_key, validation_func in validation_functions:
        try:
            results = validation_func()
            all_results[validation_key] = results
        except Exception as e:
            print(f"‚ùå Erro na valida√ß√£o {validation_key}: {e}")
            all_results[validation_key] = {}
    
    # Gerar relat√≥rio
    exit_code = generate_validation_report(all_results)
    
    # Criar guia de implanta√ß√£o
    create_deployment_guide()
    
    print("\n" + "=" * 60)
    print("‚úÖ VALIDA√á√ÉO COMPLETA CONCLU√çDA!")
    
    return exit_code

if __name__ == "__main__":
    sys.exit(main())
