#!/usr/bin/env python3
"""
üß™ Teste das otimiza√ß√µes do banco de dados
"""

import asyncio
import sys
import os

# Adicionar o diret√≥rio do projeto ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.database import AsyncSessionLocal
from sqlalchemy import text
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_database_operations():
    """Testar opera√ß√µes b√°sicas do banco"""
    
    print("üß™ Testando opera√ß√µes do banco de dados...")
    
    try:
        async with AsyncSessionLocal() as session:
            # Teste 1: Conectividade
            print("1Ô∏è‚É£ Testando conectividade...")
            result = await session.execute(text("SELECT 1"))
            if result.scalar() == 1:
                print("‚úÖ Conectividade OK")
            
            # Teste 2: Verificar tabelas existentes
            print("2Ô∏è‚É£ Verificando tabelas...")
            result = await session.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """))
            tables = [row[0] for row in result.fetchall()]
            print(f"‚úÖ Encontradas {len(tables)} tabelas: {', '.join(tables)}")
            
            # Teste 3: Verificar √≠ndices existentes
            print("3Ô∏è‚É£ Verificando √≠ndices...")
            result = await session.execute(text("""
                SELECT indexname, tablename 
                FROM pg_indexes 
                WHERE schemaname = 'public'
                ORDER BY tablename, indexname
            """))
            indexes = result.fetchall()
            print(f"‚úÖ Encontrados {len(indexes)} √≠ndices")
            
            # Teste 4: Criar um √≠ndice de teste se n√£o existir
            print("4Ô∏è‚É£ Testando cria√ß√£o de √≠ndice...")
            try:
                await session.execute(text("""
                    CREATE INDEX IF NOT EXISTS idx_test_optimization 
                    ON admin_users (created_at DESC)
                """))
                await session.commit()
                print("‚úÖ √çndice de teste criado")
            except Exception as e:
                print(f"‚ö†Ô∏è √çndice j√° existe ou erro: {e}")
            
            # Teste 5: Estat√≠sticas b√°sicas
            print("5Ô∏è‚É£ Coletando estat√≠sticas...")
            
            # Contar admins
            result = await session.execute(text("SELECT count(*) FROM admin_users"))
            admin_count = result.scalar()
            print(f"üìä Admins cadastrados: {admin_count}")
            
            # Tamanho do banco
            result = await session.execute(text("""
                SELECT pg_size_pretty(pg_database_size(current_database()))
            """))
            db_size = result.scalar()
            print(f"üìä Tamanho do banco: {db_size}")
            
            # Conex√µes ativas
            result = await session.execute(text("""
                SELECT count(*) FROM pg_stat_activity WHERE state = 'active'
            """))
            active_connections = result.scalar()
            print(f"üìä Conex√µes ativas: {active_connections}")
            
            print("\nüéØ Todos os testes passaram! O banco est√° funcionando corretamente.")
            return True
            
    except Exception as e:
        print(f"‚ùå Erro nos testes: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_database_operations())
    if not success:
        sys.exit(1)
    else:
        print("\n‚úÖ Sistema de banco de dados validado!")
        print("üöÄ Pronto para otimiza√ß√µes!")
