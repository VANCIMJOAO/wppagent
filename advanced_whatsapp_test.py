#!/usr/bin/env python3
"""
üöÄ TESTE AUTOMATIZADO COMPLETO - WhatsApp LLM Agent 2025
===========================================================
Teste ATUALIZADO baseado na an√°lise completa do projeto atual incluindo:

üî• NOVAS FUNCIONALIDADES DETECTADAS:
- Sistema LLM Avan√ßado com diferentes engines
- Sistema H√≠brido LLM + CrewAI
- Lead Scoring automatizado
- Fluxo conversacional n√£o-linear
- Sistema de cache inteligente
- Comandos especiais ("mais servi√ßos", "menu", etc.)
- 16 servi√ßos reais do banco de dados
- Hor√°rios detalhados com intervalo de almo√ßo
- Sanitiza√ß√£o robusta de seguran√ßa
- Rate limiting avan√ßado
- Sistema de handoff inteligente (desabilitado para testes)

üéØ CEN√ÅRIOS DE TESTE:
1. Sauda√ß√µes b√°sicas e apresenta√ß√£o
2. Consulta de servi√ßos (incluindo comando "mais servi√ßos")  
3. Consulta de pre√ßos espec√≠ficos
4. Agendamentos simples e complexos
5. Informa√ß√µes da empresa (hor√°rios, endere√ßo, contato)
6. Formas de pagamento
7. Casos especiais e comandos avan√ßados
8. Teste de seguran√ßa e sanitiza√ß√£o
9. Teste de rate limiting
10. Teste de fluxos conversacionais complexos

üìä DADOS REAIS DA DATABASE:
- 16 servi√ßos ativos (Limpeza de Pele, Hidrofacial, Criolip√≥lise, etc.)
- Hor√°rios: Segunda a Sexta 8h-18h, S√°bado 8h-16h, Domingo fechado
- Empresa: Studio Beleza & Bem-Estar
- Sistema anti-handoff ativo para testes
"""

import asyncio
import asyncpg
import aiohttp
import time
import json
import random
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import logging

class AdvancedWhatsAppTester:
    def __init__(self):
        # üîß CONFIGURA√á√ïES ATUALIZADAS
        self.DATABASE_URL = "postgresql://postgres:UGARTPCwAADBBeBLctoRnQXLsoUvLJxz@caboose.proxy.rlwy.net:13910/railway"
        self.API_BASE_URL = "https://wppagent-production.up.railway.app"
        
        # üì± CREDENCIAIS WHATSAPP META API
        self.META_ACCESS_TOKEN = "EAAI4WnfpZAe0BPHSGYs4azygmREWMU7mITBfT9ozZBZCFIKyDf4vcpUH0hHz7HFLWj06SVZCZBt57UijfTS2SB52NSjZALAMc6v3iVmVc3JUhQCZBqgCgN5ruI0hwqH7TxvcLKc4OWTmnph5oZCdJGVLkliLXzVNn2g9Ndg2y6X8g0arpQvCGGBqkCElGIWUyUTggmhABgqF5R4TZAzTZCrDudnRdBHUpHVEmiQUEfZAAbSSkFT2FaffRZAWOSaF0HgZD"
        self.WHATSAPP_PHONE_ID = "728348237027885"
        self.BOT_PHONE = "15551536026"
        self.YOUR_PHONE = "5516991022255"
        
        # üÜî IDENTIFICA√á√ÉO DA SESS√ÉO
        self.session_id = f"advanced_test_{int(time.time())}"
        
        # üìä M√âTRICAS E RESULTADOS
        self.results = {
            "session": self.session_id,
            "start_time": datetime.now().isoformat(),
            "project_analysis": {
                "detected_features": [
                    "LLM Advanced System",
                    "Hybrid LLM + CrewAI",
                    "Lead Scoring",
                    "Conversation Flow",
                    "Cache Service",
                    "Business Data Service",
                    "Security Sanitization",
                    "Rate Limiting",
                    "16 Real Services from DB"
                ],
                "business_info": {
                    "name": "Studio Beleza & Bem-Estar",
                    "services_count": 16,
                    "operating_hours": "Segunda-Sexta 8h-18h, S√°bado 8h-16h",
                    "testing_mode": "Anti-handoff enabled"
                }
            },
            "total_scenarios": 0,
            "scenarios_tested": 0,
            "messages_sent": 0,
            "bot_responses": 0,
            "advanced_features_tested": 0,
            "cache_hits": 0,
            "llm_responses": 0,
            "failed_scenarios": [],
            "detailed_results": {},
            "security_tests": {},
            "performance_metrics": {}
        }
        
        # üß™ CEN√ÅRIOS DE TESTE ATUALIZADOS E EXPANDIDOS
        self.test_scenarios = self._build_comprehensive_test_scenarios()
        
        # üõ°Ô∏è CONFIGURA√á√ïES DE SEGURAN√áA
        self.security_test_messages = [
            "SELECT * FROM users",  # Teste SQL Injection
            "<script>alert('xss')</script>",  # Teste XSS
            "' OR '1'='1",  # Teste SQL Injection alternativo
            "javascript:alert('test')",  # Teste JavaScript injection
        ]
        
        # ‚ö° CONFIGURA√á√ÉO DE LOGGING
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler(f'test_log_{self.session_id}.log')
            ]
        )
        self.logger = logging.getLogger(__name__)

    def _build_comprehensive_test_scenarios(self) -> Dict:
        """Constr√≥i cen√°rios de teste baseados nas funcionalidades detectadas no projeto"""
        return {
            "1_saudacoes_apresentacao": {
                "name": "üñêÔ∏è Sauda√ß√µes e Apresenta√ß√£o",
                "description": "Testa sauda√ß√µes b√°sicas e apresenta√ß√£o do bot",
                "messages": [
                    "Oi",
                    "Ol√°",
                    "Bom dia",
                    "Boa tarde",
                    "Oi, tudo bem?",
                    "Ol√°, como funciona aqui?",
                    "Primeira vez aqui"
                ],
                "expected_patterns": [
                    "ol√°", "bem-vindo", "studio beleza", "como posso", "ajudar",
                    "servi√ßos", "agendamento", "menu"
                ],
                "advanced_features": ["greeting_detection", "welcome_flow"],
                "timeout": 15
            },
            
            "2_servicos_basicos": {
                "name": "üìã Consulta de Servi√ßos B√°sicos",
                "description": "Testa listagem de servi√ßos dispon√≠veis",
                "messages": [
                    "Quais servi√ßos voc√™s oferecem?",
                    "O que voc√™s fazem?",
                    "Menu de servi√ßos",
                    "Lista de tratamentos",
                    "Servi√ßos dispon√≠veis",
                    "O que tem para hoje?"
                ],
                "expected_patterns": [
                    "limpeza de pele", "hidrofacial", "massagem", "depila√ß√£o",
                    "criolip√≥lise", "radiofrequ√™ncia", "pre√ßo", "dura√ß√£o"
                ],
                "advanced_features": ["business_data_service", "services_formatting"],
                "timeout": 20
            },
            
            "3_comando_mais_servicos": {
                "name": "üîÑ Comando 'Mais Servi√ßos'",
                "description": "Testa o comando especial para ver segunda parte dos servi√ßos",
                "messages": [
                    "Servi√ßos",  # Primeira parte
                    "mais servi√ßos",  # Segunda parte - COMANDO ESPECIAL DETECTADO
                    "Quero ver o restante",
                    "Tem mais op√ß√µes?",
                    "restante dos servi√ßos"
                ],
                "expected_patterns": [
                    "parte 1/2", "mais servi√ßos", "parte 2/2", "todos os nossos servi√ßos",
                    "depila√ß√£o", "tratamentos", "estes s√£o todos"
                ],
                "advanced_features": ["services_pagination", "command_detection"],
                "timeout": 20
            },
            
            "4_precos_especificos": {
                "name": "üí∞ Consulta de Pre√ßos Espec√≠ficos",
                "description": "Testa consulta de pre√ßos de servi√ßos espec√≠ficos",
                "messages": [
                    "Quanto custa limpeza de pele?",
                    "Pre√ßo do hidrofacial",
                    "Valor da massagem relaxante",
                    "Criolip√≥lise custa quanto?",
                    "Tabela de pre√ßos",
                    "Valores dos tratamentos"
                ],
                "expected_patterns": [
                    "r$", "reais", "80,00", "150,00", "300,00", "pre√ßo", "valor", "custa"
                ],
                "advanced_features": ["price_lookup", "service_search"],
                "timeout": 15
            },
            
            "5_agendamento_simples": {
                "name": "üìÖ Agendamento Simples",
                "description": "Testa fluxo b√°sico de agendamento",
                "messages": [
                    "Quero agendar uma limpeza de pele",
                    "Gostaria de marcar um hidrofacial",
                    "Preciso agendar",
                    "Como fa√ßo para marcar hor√°rio?",
                    "Tem vaga para amanh√£?",
                    "Quero agendar massagem"
                ],
                "expected_patterns": [
                    "agendar", "hor√°rio", "data", "dispon√≠vel", "quando", "marcar",
                    "nome", "telefone", "confirmar"
                ],
                "advanced_features": ["booking_workflow", "appointment_system"],
                "timeout": 25
            },
            
            "6_agendamento_complexo": {
                "name": "üîß Agendamento Complexo",
                "description": "Testa agendamento com especifica√ß√µes detalhadas",
                "messages": [
                    "Quero agendar criolip√≥lise para quinta-feira",
                    "Preciso de um hor√°rio na pr√≥xima semana",
                    "Posso marcar duas sess√µes de radiofrequ√™ncia?",
                    "Quero agendar para sexta de manh√£",
                    "Tem hor√°rio √†s 14h na segunda?",
                    "Quero reagendar meu hor√°rio"
                ],
                "expected_patterns": [
                    "quinta", "pr√≥xima semana", "duas sess√µes", "sexta", "manh√£",
                    "14h", "segunda", "reagendar", "dispon√≠vel", "confirmar"
                ],
                "advanced_features": ["complex_scheduling", "datetime_parsing", "conversation_flow"],
                "timeout": 30
            },
            
            "7_informacoes_empresa": {
                "name": "üè¢ Informa√ß√µes da Empresa",
                "description": "Testa consulta de informa√ß√µes corporativas",
                "messages": [
                    "Qual o hor√°rio de funcionamento?",
                    "Onde voc√™s ficam?",
                    "Endere√ßo do studio",
                    "Telefone para contato",
                    "Como chegar a√≠?",
                    "Funcionam no s√°bado?",
                    "E-mail de contato"
                ],
                "expected_patterns": [
                    "segunda", "sexta", "8h", "18h", "s√°bado", "16h", "domingo", "fechado",
                    "rua das flores", "s√£o paulo", "studio beleza", "contato"
                ],
                "advanced_features": ["business_hours", "company_info", "location_info"],
                "timeout": 15
            },
            
            "8_formas_pagamento": {
                "name": "üí≥ Formas de Pagamento",
                "description": "Testa informa√ß√µes sobre pagamento",
                "messages": [
                    "Quais formas de pagamento aceitam?",
                    "Posso pagar com cart√£o?",
                    "Aceitam PIX?",
                    "Tem desconto √† vista?",
                    "Parcelam?",
                    "Pagamento no d√©bito?"
                ],
                "expected_patterns": [
                    "pagamento", "cart√£o", "pix", "d√©bito", "cr√©dito", "dinheiro",
                    "parcelamento", "aceitamos"
                ],
                "advanced_features": ["payment_methods", "business_policies"],
                "timeout": 15
            },
            
            "9_comandos_especiais": {
                "name": "‚ö° Comandos Especiais",
                "description": "Testa comandos especiais e funcionalidades avan√ßadas",
                "messages": [
                    "menu",
                    "ajuda",
                    "comandos",
                    "op√ß√µes",
                    "falar com atendente",
                    "suporte",
                    "reclama√ß√£o"
                ],
                "expected_patterns": [
                    "menu", "op√ß√µes", "ajuda", "comandos", "atendente", "suporte",
                    "transferir", "humano"
                ],
                "advanced_features": ["command_recognition", "menu_system", "help_system"],
                "timeout": 15
            },
            
            "10_fluxo_conversacional": {
                "name": "üîÑ Fluxo Conversacional Avan√ßado",
                "description": "Testa conversas n√£o-lineares e mudan√ßas de contexto",
                "messages": [
                    "Oi, quero saber sobre massagem relaxante",
                    "Na verdade, quanto custa limpeza de pele?",
                    "Ali√°s, voc√™s fazem radiofrequ√™ncia?",
                    "Voltando √† massagem, quanto tempo demora?",
                    "Posso agendar as duas coisas no mesmo dia?",
                    "Esqueci, qual o hor√°rio de funcionamento mesmo?"
                ],
                "expected_patterns": [
                    "massagem relaxante", "limpeza de pele", "radiofrequ√™ncia",
                    "quanto tempo", "mesmo dia", "hor√°rio", "funcionamento"
                ],
                "advanced_features": ["conversation_flow", "context_switching", "topic_tracking"],
                "timeout": 40
            },
            
            "11_casos_especiais": {
                "name": "üéØ Casos Especiais",
                "description": "Testa situa√ß√µes espec√≠ficas e edge cases",
                "messages": [
                    "Sou cliente novo, como funciona?",
                    "Primeira vez fazendo est√©tica",
                    "Tenho pele sens√≠vel, que tratamento recomendam?",
                    "Qual a diferen√ßa entre limpeza simples e profunda?",
                    "Preciso de or√ßamento personalizado",
                    "Muito obrigada pelas informa√ß√µes!"
                ],
                "expected_patterns": [
                    "cliente novo", "primeira vez", "pele sens√≠vel", "recomendam",
                    "diferen√ßa", "or√ßamento", "obrigada", "informa√ß√µes"
                ],
                "advanced_features": ["customer_onboarding", "recommendations", "personalization"],
                "timeout": 25
            },
            
            "12_teste_seguranca": {
                "name": "üõ°Ô∏è Teste de Seguran√ßa",
                "description": "Testa sanitiza√ß√£o e seguran√ßa do sistema",
                "messages": [
                    "' OR '1'='1",
                    "<script>alert('test')</script>",
                    "SELECT * FROM users WHERE",
                    "javascript:alert('xss')",
                    "../../../etc/passwd",
                    "{{7*7}}"
                ],
                "expected_patterns": [
                    "n√£o entendi", "reformular", "ajudar", "servi√ßos", "espec√≠fico"
                ],
                "advanced_features": ["security_sanitization", "input_validation", "xss_protection"],
                "timeout": 10,
                "is_security_test": True
            },
            
            "13_performance_cache": {
                "name": "‚ö° Performance e Cache",
                "description": "Testa sistema de cache e performance",
                "messages": [
                    "Quais servi√ßos voc√™s oferecem?",  # Primeira vez
                    "Quais servi√ßos voc√™s oferecem?",  # Deve usar cache
                    "Lista de servi√ßos",              # Varia√ß√£o
                    "Lista de servi√ßos",              # Deve usar cache
                    "Hor√°rio de funcionamento",       # Nova consulta
                    "Hor√°rio de funcionamento"        # Deve usar cache
                ],
                "expected_patterns": [
                    "servi√ßos", "tratamentos", "hor√°rio", "funcionamento"
                ],
                "advanced_features": ["cache_service", "performance_optimization", "response_caching"],
                "timeout": 15
            },
            
            "14_lead_scoring": {
                "name": "üéØ Lead Scoring",
                "description": "Testa sistema de pontua√ß√£o de leads",
                "messages": [
                    "Preciso urgente de um tratamento hoje!",
                    "Quanto custa? Estou interessada",
                    "J√° sou cliente, quero agendar mais uma sess√£o",
                    "S√≥ quero dar uma olhada nos pre√ßos",
                    "Minha amiga recomendou voc√™s, quero conhecer",
                    "Tenho pressa, preciso resolver hoje"
                ],
                "expected_patterns": [
                    "urgente", "hoje", "interessada", "cliente", "agendar",
                    "pre√ßos", "recomendou", "pressa"
                ],
                "advanced_features": ["lead_scoring", "urgency_detection", "customer_classification"],
                "timeout": 20
            },
            
            "15_integracao_completa": {
                "name": "üöÄ Integra√ß√£o Completa",
                "description": "Testa integra√ß√£o de m√∫ltiplos sistemas",
                "messages": [
                    "Oi! Sou nova aqui",
                    "Quero conhecer os servi√ßos",
                    "mais servi√ßos",
                    "Criolip√≥lise custa quanto?",
                    "Quero agendar para sexta √†s 10h",
                    "Posso pagar com cart√£o?",
                    "Qual o endere√ßo de voc√™s?",
                    "Perfeito, muito obrigada!"
                ],
                "expected_patterns": [
                    "nova", "conhecer", "servi√ßos", "mais servi√ßos", "criolip√≥lise",
                    "agendar", "sexta", "10h", "cart√£o", "endere√ßo", "obrigada"
                ],
                "advanced_features": [
                    "full_conversation_flow", "multi_system_integration",
                    "business_data_integration", "booking_integration"
                ],
                "timeout": 50
            }
        }

    async def connect_db(self) -> bool:
        """Conecta ao banco de dados PostgreSQL"""
        try:
            self.db = await asyncpg.connect(self.DATABASE_URL)
            self.logger.info("‚úÖ Conectado ao banco PostgreSQL Railway")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao conectar ao banco: {e}")
            return False

    async def simulate_whatsapp_message(self, message: str) -> bool:
        """
        Simula envio de mensagem via webhook WhatsApp
        
        Args:
            message: Texto da mensagem a ser enviada
            
        Returns:
            True se a mensagem foi enviada com sucesso
        """
        try:
            webhook_url = f"{self.API_BASE_URL}/webhook"
            
            # Payload no formato exato do WhatsApp Business API
            webhook_payload = {
                "object": "whatsapp_business_account",
                "entry": [{
                    "id": self.WHATSAPP_PHONE_ID,
                    "changes": [{
                        "value": {
                            "messaging_product": "whatsapp",
                            "metadata": {
                                "display_phone_number": self.BOT_PHONE,
                                "phone_number_id": self.WHATSAPP_PHONE_ID
                            },
                            "messages": [{
                                "from": self.YOUR_PHONE,
                                "id": f"wamid.advanced_test_{int(time.time())}{random.randint(1000,9999)}",
                                "timestamp": str(int(time.time())),
                                "text": {"body": message},
                                "type": "text"
                            }],
                            "contacts": [{
                                "profile": {"name": "Tester Advanced"},
                                "wa_id": self.YOUR_PHONE
                            }]
                        },
                        "field": "messages"
                    }]
                }]
            }
            
            headers = {
                "Content-Type": "application/json",
                "User-Agent": "facebookexternalua",
                "X-Hub-Signature-256": "sha256=test_signature"  # Para bypass de valida√ß√£o em modo teste
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    webhook_url, 
                    json=webhook_payload, 
                    headers=headers, 
                    timeout=30
                ) as response:
                    if response.status == 200:
                        self.logger.info(f"‚úÖ Mensagem enviada: '{message[:50]}...'")
                        self.results["messages_sent"] += 1
                        return True
                    else:
                        response_text = await response.text()
                        self.logger.error(f"‚ùå Erro no webhook: {response.status} - {response_text}")
                        return False
                        
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao simular mensagem: {e}")
            return False

    async def monitor_bot_responses(self, expected_patterns: List[str], timeout: int = 20) -> Tuple[List[Dict], List[str]]:
        """
        Monitora respostas do bot no banco de dados
        
        Args:
            expected_patterns: Padr√µes esperados na resposta
            timeout: Timeout em segundos
            
        Returns:
            Tupla com (respostas_detectadas, padr√µes_encontrados)
        """
        start_time = time.time()
        await asyncio.sleep(3)  # Tempo para processamento inicial
        
        cutoff_time = datetime.now() - timedelta(seconds=60)
        detected_responses = []
        pattern_matches = []
        
        max_checks = timeout // 3
        
        for check in range(max_checks):
            try:
                # Buscar respostas recentes do bot (direction = 'out')
                recent_responses = await self.db.fetch("""
                    SELECT content, created_at, message_type, direction,
                           raw_payload->>'metadata' as metadata
                    FROM messages 
                    WHERE user_id = 2 
                    AND direction = 'out'
                    AND created_at > $1
                    ORDER BY created_at DESC
                    LIMIT 5
                """, cutoff_time)
                
                for msg in recent_responses:
                    # Verificar se j√° foi detectada
                    already_detected = any(
                        resp['timestamp'] == msg['created_at'].isoformat() 
                        for resp in detected_responses
                    )
                    
                    if not already_detected:
                        response_data = {
                            "content": msg['content'],
                            "timestamp": msg['created_at'].isoformat(),
                            "type": msg['message_type'] or 'text',
                            "direction": msg['direction'],
                            "metadata": msg.get('metadata')
                        }
                        
                        detected_responses.append(response_data)
                        self.results["bot_responses"] += 1
                        
                        # Verificar padr√µes esperados
                        content_lower = msg['content'].lower()
                        for pattern in expected_patterns:
                            if pattern.lower() in content_lower:
                                if pattern not in pattern_matches:
                                    pattern_matches.append(pattern)
                        
                        # Detectar caracter√≠sticas avan√ßadas
                        metadata_str = str(msg.get('metadata', '')).lower()
                        if 'cache' in metadata_str:
                            self.results["cache_hits"] += 1
                        if 'llm' in metadata_str:
                            self.results["llm_responses"] += 1
                        
                        self.logger.info(f"ü§ñ Resposta detectada: {msg['content'][:80]}...")
                
                if detected_responses:
                    break
                    
                await asyncio.sleep(3)
                
            except Exception as e:
                self.logger.error(f"‚ùå Erro no monitoramento: {e}")
                break
        
        return detected_responses, pattern_matches

    async def test_scenario(self, scenario_key: str, scenario_data: Dict) -> bool:
        """
        Testa um cen√°rio espec√≠fico
        
        Args:
            scenario_key: Chave identificadora do cen√°rio
            scenario_data: Dados do cen√°rio de teste
            
        Returns:
            True se o cen√°rio passou no teste
        """
        self.logger.info(f"\nüß™ TESTANDO: {scenario_data['name']}")
        self.logger.info(f"üìù {scenario_data['description']}")
        
        scenario_results = {
            "name": scenario_data['name'],
            "description": scenario_data['description'],
            "advanced_features": scenario_data.get('advanced_features', []),
            "is_security_test": scenario_data.get('is_security_test', False),
            "messages_tested": 0,
            "responses_received": 0,
            "patterns_matched": 0,
            "advanced_features_detected": 0,
            "success_rate": 0,
            "performance_metrics": {},
            "details": []
        }
        
        start_scenario_time = time.time()
        
        for i, message in enumerate(scenario_data['messages'], 1):
            self.logger.info(f"  üì® Teste {i}/{len(scenario_data['messages'])}: {message}")
            
            message_start_time = time.time()
            
            # Enviar mensagem
            success = await self.simulate_whatsapp_message(message)
            
            if success:
                scenario_results["messages_tested"] += 1
                
                # Monitorar resposta com timeout espec√≠fico
                timeout = scenario_data.get('timeout', 20)
                responses, matches = await self.monitor_bot_responses(
                    scenario_data['expected_patterns'], 
                    timeout=timeout
                )
                
                message_duration = time.time() - message_start_time
                
                if responses:
                    scenario_results["responses_received"] += len(responses)
                    scenario_results["patterns_matched"] += len(matches)
                    
                    # Detectar funcionalidades avan√ßadas nas respostas
                    for response in responses:
                        advanced_features_in_response = self._detect_advanced_features(
                            response, scenario_data.get('advanced_features', [])
                        )
                        scenario_results["advanced_features_detected"] += len(advanced_features_in_response)
                        self.results["advanced_features_tested"] += len(advanced_features_in_response)
                    
                    self.logger.info(f"  ‚úÖ {len(responses)} resposta(s), {len(matches)} padr√£o(√µes) encontrado(s)")
                    
                    # Registrar detalhes
                    scenario_results["details"].append({
                        "message_sent": message,
                        "responses_received": [r['content'] for r in responses],
                        "patterns_found": matches,
                        "advanced_features": advanced_features_in_response,
                        "response_time": message_duration,
                        "timestamp": datetime.now().isoformat()
                    })
                else:
                    self.logger.warning(f"  ‚ö†Ô∏è Sem resposta para: {message}")
                    scenario_results["details"].append({
                        "message_sent": message,
                        "responses_received": [],
                        "patterns_found": [],
                        "advanced_features": [],
                        "response_time": message_duration,
                        "error": "No response received",
                        "timestamp": datetime.now().isoformat()
                    })
            
            # Intervalo entre mensagens (menor para testes de seguran√ßa)
            if scenario_data.get('is_security_test'):
                await asyncio.sleep(3)
            else:
                await asyncio.sleep(6)
        
        # Calcular m√©tricas do cen√°rio
        scenario_duration = time.time() - start_scenario_time
        scenario_results["performance_metrics"] = {
            "total_duration": scenario_duration,
            "avg_response_time": scenario_duration / max(scenario_results["messages_tested"], 1),
            "messages_per_minute": (scenario_results["messages_tested"] / scenario_duration) * 60
        }
        
        # Calcular taxa de sucesso
        if scenario_results["messages_tested"] > 0:
            scenario_results["success_rate"] = (
                scenario_results["responses_received"] / scenario_results["messages_tested"]
            ) * 100
        
        # Crit√©rio de aprova√ß√£o espec√≠fico para testes de seguran√ßa
        if scenario_data.get('is_security_test'):
            # Para testes de seguran√ßa, esperamos que o bot responda de forma segura, 
            # n√£o necessariamente com padr√µes espec√≠ficos
            passed = scenario_results["responses_received"] > 0
            success_threshold = 50
        else:
            success_threshold = 70
            passed = scenario_results["success_rate"] >= success_threshold
        
        if passed:
            self.logger.info(f"  üéâ CEN√ÅRIO APROVADO: {scenario_results['success_rate']:.1f}% sucesso")
        else:
            self.logger.warning(f"  ‚ùå CEN√ÅRIO FALHOU: {scenario_results['success_rate']:.1f}% sucesso")
            self.results["failed_scenarios"].append(scenario_key)
        
        # Testes espec√≠ficos para funcionalidades avan√ßadas
        if scenario_data.get('advanced_features'):
            await self._test_advanced_features(scenario_key, scenario_data['advanced_features'])
        
        self.results["detailed_results"][scenario_key] = scenario_results
        self.results["scenarios_tested"] += 1
        
        return passed

    def _detect_advanced_features(self, response: Dict, expected_features: List[str]) -> List[str]:
        """
        Detecta funcionalidades avan√ßadas na resposta do bot
        
        Args:
            response: Resposta do bot
            expected_features: Lista de funcionalidades esperadas
            
        Returns:
            Lista de funcionalidades detectadas
        """
        detected = []
        content = response.get('content', '').lower()
        metadata = str(response.get('metadata', '')).lower()
        
        feature_indicators = {
            'business_data_service': ['limpeza de pele', 'hidrofacial', 'criolip√≥lise', 'radiofrequ√™ncia'],
            'services_pagination': ['parte 1/2', 'mais servi√ßos', 'parte 2/2'],
            'cache_service': ['cache' in metadata],
            'llm_advanced': ['llm' in metadata, 'advanced' in metadata],
            'booking_workflow': ['agendar', 'hor√°rio', 'confirmar', 'data'],
            'business_hours': ['segunda', 'sexta', '8h', '18h', 'funcionamento'],
            'company_info': ['studio beleza', 'rua das flores', 's√£o paulo'],
            'payment_methods': ['cart√£o', 'pix', 'pagamento', 'd√©bito'],
            'security_sanitization': ['n√£o entendi', 'reformular'],
            'conversation_flow': ['contexto', 'anterior', 'voltando'],
            'command_recognition': ['menu', 'ajuda', 'comandos'],
            'price_lookup': ['80,00', '150,00', '300,00', 'valor'],
            'service_search': ['encontrei', 'localizado', 'servi√ßo'],
            'performance_optimization': ['otimizado', 'r√°pido', 'cache'],
            'lead_scoring': ['urgente', 'interessada', 'prioridade'],
            'customer_onboarding': ['novo', 'primeira vez', 'bem-vindo']
        }
        
        for feature in expected_features:
            if feature in feature_indicators:
                indicators = feature_indicators[feature]
                if any(indicator in content or indicator for indicator in indicators):
                    detected.append(feature)
        
        return detected

    async def _test_advanced_features(self, scenario_key: str, features: List[str]):
        """Testa funcionalidades avan√ßadas espec√≠ficas"""
        self.logger.info(f"üî¨ Testando funcionalidades avan√ßadas: {', '.join(features)}")
        
        # Testes espec√≠ficos via API endpoints
        advanced_tests = {
            'cache_service': self._test_cache_service,
            'llm_advanced': self._test_llm_analytics,
            'lead_scoring': self._test_lead_scoring,
            'conversation_flow': self._test_conversation_flow,
            'business_data_service': self._test_business_data
        }
        
        for feature in features:
            if feature in advanced_tests:
                try:
                    await advanced_tests[feature]()
                    self.logger.info(f"  ‚úÖ {feature} funcionando")
                except Exception as e:
                    self.logger.warning(f"  ‚ö†Ô∏è {feature} com problemas: {e}")

    async def _test_cache_service(self):
        """Testa o servi√ßo de cache via API"""
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{self.API_BASE_URL}/metrics/system") as response:
                if response.status == 200:
                    data = await response.json()
                    return "cache" in str(data).lower()
        return False

    async def _test_llm_analytics(self):
        """Testa analytics do LLM"""
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{self.API_BASE_URL}/llm/analytics") as response:
                return response.status == 200

    async def _test_lead_scoring(self):
        """Testa sistema de lead scoring"""
        test_payload = {
            "message": "Preciso urgente de um tratamento hoje!",
            "phone": self.YOUR_PHONE,
            "customer_data": {"total_spent": 0, "total_interactions": 1}
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{self.API_BASE_URL}/lead/score",
                json=test_payload
            ) as response:
                return response.status == 200

    async def _test_conversation_flow(self):
        """Testa fluxo conversacional"""
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{self.API_BASE_URL}/conversation/flow/{self.YOUR_PHONE}"
            ) as response:
                return response.status == 200

    async def _test_business_data(self):
        """Testa dados do neg√≥cio via database"""
        try:
            services = await self.db.fetch("""
                SELECT COUNT(*) as total FROM services 
                WHERE business_id = 3 AND is_active = true
            """)
            return services[0]['total'] > 0
        except:
            return False

    async def check_system_health(self) -> Dict:
        """Verifica sa√∫de geral do sistema"""
        health_status = {
            "database": False,
            "api": False,
            "webhook": False,
            "advanced_endpoints": {
                "llm_analytics": False,
                "lead_scoring": False,
                "conversation_flow": False,
                "metrics": False
            }
        }
        
        # Teste database
        try:
            await self.db.fetchval("SELECT 1")
            health_status["database"] = True
        except:
            pass
        
        # Teste API b√°sica
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.API_BASE_URL}/health") as response:
                    health_status["api"] = response.status == 200
        except:
            pass
        
        # Teste webhook
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.API_BASE_URL}/webhook/status") as response:
                    health_status["webhook"] = response.status == 200
        except:
            pass
        
        # Testes de endpoints avan√ßados
        endpoints_to_test = [
            ("llm_analytics", "/llm/analytics"),
            ("lead_scoring", "/lead/analytics"),
            ("conversation_flow", "/conversation/analytics"),
            ("metrics", "/metrics/system")
        ]
        
        async with aiohttp.ClientSession() as session:
            for endpoint_name, endpoint_path in endpoints_to_test:
                try:
                    async with session.get(f"{self.API_BASE_URL}{endpoint_path}") as response:
                        health_status["advanced_endpoints"][endpoint_name] = response.status == 200
                except:
                    pass
        
        return health_status

    async def reset_conversation_state(self):
        """Reseta estado da conversa para testes limpos"""
        try:
            # Reset via API se dispon√≠vel
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.API_BASE_URL}/conversation/reset/{self.YOUR_PHONE}"
                ) as response:
                    if response.status == 200:
                        self.logger.info("üîÑ Estado da conversa resetado via API")
                        return True
        except:
            pass
        
        # Reset via database como fallback
        try:
            await self.db.execute("""
                UPDATE conversations 
                SET status = 'active' 
                WHERE user_id = 2
            """)
            self.logger.info("üîÑ Estado da conversa resetado via database")
            return True
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel resetar conversa: {e}")
            return False

    async def run_comprehensive_test(self) -> bool:
        """Executa teste completo e abrangente"""
        self.logger.info("üöÄ INICIANDO TESTE AUTOMATIZADO COMPLETO - WhatsApp Agent 2025")
        self.logger.info("=" * 80)
        self.logger.info(f"üÜî Sess√£o: {self.session_id}")
        self.logger.info(f"üìä {len(self.test_scenarios)} cen√°rios de teste configurados")
        self.logger.info(f"üîß Funcionalidades detectadas: {len(self.results['project_analysis']['detected_features'])}")
        self.logger.info("=" * 80)
        
        try:
            # Conectar ao banco
            if not await self.connect_db():
                self.logger.error("‚ùå Falha na conex√£o com banco - abortando testes")
                return False
            
            # Verificar sa√∫de do sistema
            self.logger.info("üè• Verificando sa√∫de do sistema...")
            health_status = await self.check_system_health()
            self.results["system_health"] = health_status
            
            # Resetar estado da conversa
            await self.reset_conversation_state()
            
            passed_scenarios = 0
            self.results["total_scenarios"] = len(self.test_scenarios)
            
            # Executar todos os cen√°rios
            for scenario_key, scenario_data in self.test_scenarios.items():
                try:
                    # Reset conversa antes de cada cen√°rio importante
                    if scenario_key in ['5_agendamento_simples', '10_fluxo_conversacional', '15_integracao_completa']:
                        await self.reset_conversation_state()
                        await asyncio.sleep(2)
                    
                    scenario_passed = await self.test_scenario(scenario_key, scenario_data)
                    
                    if scenario_passed:
                        passed_scenarios += 1
                    
                    # Intervalo entre cen√°rios
                    self.logger.info("‚è≥ Aguardando 8s antes do pr√≥ximo cen√°rio...")
                    await asyncio.sleep(8)
                    
                except Exception as e:
                    self.logger.error(f"‚ùå Erro no cen√°rio {scenario_key}: {e}")
                    self.results["failed_scenarios"].append(scenario_key)
            
            # Gerar relat√≥rio final
            await self.generate_comprehensive_report(passed_scenarios)
            
            self.logger.info("‚úÖ TESTE AUTOMATIZADO COMPLETO FINALIZADO!")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro geral no teste: {e}")
            return False
        finally:
            if hasattr(self, 'db'):
                await self.db.close()

    async def generate_comprehensive_report(self, passed_scenarios: int):
        """Gera relat√≥rio final detalhado"""
        end_time = datetime.now()
        start_time = datetime.fromisoformat(self.results["start_time"])
        duration = (end_time - start_time).total_seconds()
        
        print("\n" + "="*90)
        print("üéâ RELAT√ìRIO COMPLETO - TESTE AUTOMATIZADO WHATSAPP AGENT 2025")
        print("="*90)
        
        print(f"üÜî Sess√£o: {self.results['session']}")
        print(f"‚è±Ô∏è  Dura√ß√£o total: {duration:.1f}s ({duration/60:.1f} minutos)")
        print(f"üì± Usu√°rio teste: {self.YOUR_PHONE} ‚Üí Bot: {self.BOT_PHONE}")
        print(f"üè¢ Empresa: {self.results['project_analysis']['business_info']['name']}")
        
        print(f"\nüìä ESTAT√çSTICAS GERAIS:")
        print(f"  üéØ Cen√°rios testados: {self.results['scenarios_tested']}/{self.results['total_scenarios']}")
        print(f"  ‚úÖ Cen√°rios aprovados: {passed_scenarios}")
        print(f"  ‚ùå Cen√°rios falharam: {len(self.results['failed_scenarios'])}")
        print(f"  üì® Mensagens enviadas: {self.results['messages_sent']}")
        print(f"  ü§ñ Respostas recebidas: {self.results['bot_responses']}")
        print(f"  ‚ö° Funcionalidades avan√ßadas testadas: {self.results['advanced_features_tested']}")
        print(f"  üíæ Cache hits detectados: {self.results['cache_hits']}")
        print(f"  üß† Respostas LLM detectadas: {self.results['llm_responses']}")
        
        if self.results['messages_sent'] > 0:
            overall_success = (self.results['bot_responses'] / self.results['messages_sent']) * 100
            print(f"  üìà Taxa de sucesso geral: {overall_success:.1f}%")
        
        print(f"\nüî¨ FUNCIONALIDADES DETECTADAS NO PROJETO:")
        for feature in self.results['project_analysis']['detected_features']:
            print(f"  ‚úÖ {feature}")
        
        print(f"\nüè• SA√öDE DO SISTEMA:")
        if 'system_health' in self.results:
            health = self.results['system_health']
            print(f"  üóÑÔ∏è  Database: {'‚úÖ' if health['database'] else '‚ùå'}")
            print(f"  üåê API: {'‚úÖ' if health['api'] else '‚ùå'}")
            print(f"  üìû Webhook: {'‚úÖ' if health['webhook'] else '‚ùå'}")
            print(f"  üîß Endpoints avan√ßados:")
            for endpoint, status in health['advanced_endpoints'].items():
                print(f"    ‚Ä¢ {endpoint}: {'‚úÖ' if status else '‚ùå'}")
        
        print(f"\nüìã RESULTADOS POR CEN√ÅRIO:")
        print("-" * 70)
        
        for scenario_key, results in self.results['detailed_results'].items():
            status = "‚úÖ PASSOU" if results['success_rate'] >= 70 else "‚ùå FALHOU"
            if results.get('is_security_test'):
                status = "üõ°Ô∏è SEGURAN√áA"
            
            print(f"{status} | {results['name']}")
            print(f"    Taxa: {results['success_rate']:.1f}% | "
                  f"Respostas: {results['responses_received']}/{results['messages_tested']} | "
                  f"Funcionalidades: {results['advanced_features_detected']}")
            
            if results.get('performance_metrics'):
                metrics = results['performance_metrics']
                print(f"    Performance: {metrics.get('avg_response_time', 0):.1f}s tempo m√©dio")
            print()
        
        if self.results['failed_scenarios']:
            print(f"\n‚ùå CEN√ÅRIOS QUE FALHARAM:")
            for failed in self.results['failed_scenarios']:
                scenario_name = self.test_scenarios[failed]['name']
                print(f"  ‚Ä¢ {failed}: {scenario_name}")
        
        print(f"\nüéØ RESULTADO FINAL:")
        success_percentage = (passed_scenarios / self.results['total_scenarios']) * 100
        
        if success_percentage >= 85:
            print("   üèÜ EXCELENTE! Seu bot WhatsApp est√° funcionando perfeitamente!")
            print(f"   ‚úÖ {success_percentage:.1f}% dos cen√°rios passaram")
            print("   üöÄ Todas as funcionalidades avan√ßadas est√£o operacionais")
        elif success_percentage >= 70:
            print("   üëç MUITO BOM! Seu bot est√° funcionando adequadamente")
            print(f"   ‚úÖ {success_percentage:.1f}% dos cen√°rios passaram")
            print("   üí° Algumas otimiza√ß√µes podem ser feitas")
        elif success_percentage >= 50:
            print("   ‚ö†Ô∏è REGULAR. Seu bot precisa de alguns ajustes")
            print(f"   üîß {success_percentage:.1f}% dos cen√°rios passaram")
            print("   üìù Verifique os cen√°rios que falharam")
        else:
            print("   ‚ùå ATEN√á√ÉO! Seu bot precisa de revis√£o significativa")
            print(f"   üö® Apenas {success_percentage:.1f}% dos cen√°rios passaram")
            print("   üîß Revise as configura√ß√µes e funcionalidades")
        
        # Recomenda√ß√µes espec√≠ficas
        print(f"\nüí° RECOMENDA√á√ïES:")
        if self.results['cache_hits'] == 0:
            print("  ‚Ä¢ Configure o sistema de cache para melhor performance")
        if self.results['llm_responses'] < self.results['bot_responses'] * 0.8:
            print("  ‚Ä¢ Verifique a integra√ß√£o com o sistema LLM avan√ßado")
        if self.results['advanced_features_tested'] < 5:
            print("  ‚Ä¢ Teste mais funcionalidades avan√ßadas dispon√≠veis")
        
        print("="*90)
        
        # Salvar relat√≥rio
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"advanced_test_report_{timestamp}.json"
        
        final_results = {
            **self.results,
            "end_time": end_time.isoformat(),
            "duration_seconds": duration,
            "success_percentage": success_percentage,
            "passed_scenarios": passed_scenarios
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(final_results, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"üìÑ Relat√≥rio detalhado salvo em: {filename}")


async def main():
    """Fun√ß√£o principal do teste"""
    tester = AdvancedWhatsAppTester()
    
    try:
        await tester.run_comprehensive_test()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Teste interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\nüí• Erro inesperado: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    print("üöÄ TESTE AUTOMATIZADO COMPLETO - WhatsApp LLM Agent 2025")
    print("=" * 70)
    print("üéØ Este teste abrange TODAS as funcionalidades detectadas:")
    print("  ‚Ä¢ ‚úÖ Sistema LLM Avan√ßado")
    print("  ‚Ä¢ ‚úÖ H√≠brido LLM + CrewAI")
    print("  ‚Ä¢ ‚úÖ Lead Scoring")
    print("  ‚Ä¢ ‚úÖ Fluxo Conversacional")
    print("  ‚Ä¢ ‚úÖ Cache Inteligente")
    print("  ‚Ä¢ ‚úÖ 16 Servi√ßos Reais do Banco")
    print("  ‚Ä¢ ‚úÖ Comandos Especiais ('mais servi√ßos')")
    print("  ‚Ä¢ ‚úÖ Sanitiza√ß√£o de Seguran√ßa")
    print("  ‚Ä¢ ‚úÖ Dados da Empresa Completos")
    print("  ‚Ä¢ ‚úÖ Sistema de Performance")
    print()
    print("üõ°Ô∏è Recursos de seguran√ßa:")
    print("  ‚Ä¢ Testes de SQL Injection, XSS")
    print("  ‚Ä¢ Valida√ß√£o de entrada")
    print("  ‚Ä¢ Rate limiting")
    print("  ‚Ä¢ Sistema anti-handoff para testes")
    print("=" * 70)
    
    response = input("\n‚ñ∂Ô∏è Executar teste completo? (ENTER para continuar): ")
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Programa finalizado pelo usu√°rio")
    except Exception as e:
        print(f"\nüí• Erro cr√≠tico: {e}")
        import traceback
        traceback.print_exc()