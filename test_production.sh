#!/bin/bash

# üß™ SUITE COMPLETA DE TESTES - WHATSAPP AGENT PRODU√á√ÉO
# Execute este script para testar 100% da aplica√ß√£o

echo "üöÄ INICIANDO TESTES COMPLETOS DE PRODU√á√ÉO"
echo "==========================================="

# Configurar URL base
BASE_URL="https://wppagent-production.up.railway.app"
echo "üåê Base URL: $BASE_URL"

# Cores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para testar endpoints
test_endpoint() {
    local method=$1
    local endpoint=$2
    local expected_status=$3
    local data=$4
    
    echo -n "üß™ Testando $method $endpoint... "
    
    if [ "$method" = "GET" ]; then
        response=$(curl -s -w "%{http_code}" -o /tmp/response.json "$BASE_URL$endpoint")
    elif [ "$method" = "POST" ]; then
        response=$(curl -s -w "%{http_code}" -o /tmp/response.json \
            -X POST \
            -H "Content-Type: application/json" \
            -d "$data" \
            "$BASE_URL$endpoint")
    fi
    
    if [ "$response" = "$expected_status" ]; then
        echo -e "${GREEN}‚úÖ OK ($response)${NC}"
        return 0
    else
        echo -e "${RED}‚ùå FAIL ($response)${NC}"
        echo "Response content:"
        cat /tmp/response.json 2>/dev/null || echo "No response content"
        return 1
    fi
}

# Contadores
PASSED=0
FAILED=0

# ==========================================
# FASE 1: TESTES B√ÅSICOS DE INFRAESTRUTURA
# ==========================================

echo ""
echo "üèóÔ∏è  FASE 1: INFRAESTRUTURA B√ÅSICA"
echo "================================="

# Health check b√°sico
if test_endpoint "GET" "/health" "200"; then
    ((PASSED++))
else
    ((FAILED++))
fi

# Endpoint raiz
if test_endpoint "GET" "/" "200"; then
    ((PASSED++))
else
    ((FAILED++))
fi

# Docs (OpenAPI)
if test_endpoint "GET" "/docs" "200"; then
    ((PASSED++))
else
    ((FAILED++))
fi

# ==========================================
# FASE 2: TESTES DE AUTENTICA√á√ÉO E SEGURAN√áA
# ==========================================

echo ""
echo "üîí FASE 2: SEGURAN√áA E AUTENTICA√á√ÉO"
echo "==================================="

# Tentar acessar endpoint protegido sem auth (deve falhar)
echo -n "üß™ Testando prote√ß√£o de rota... "
response=$(curl -s -w "%{http_code}" -o /tmp/response.json "$BASE_URL/admin")
if [ "$response" = "401" ] || [ "$response" = "403" ] || [ "$response" = "404" ]; then
    echo -e "${GREEN}‚úÖ OK (protegido/n√£o encontrado: $response)${NC}"
    ((PASSED++))
else
    echo -e "${RED}‚ùå FAIL (n√£o protegido: $response)${NC}"
    ((FAILED++))
fi

# ==========================================
# FASE 3: TESTES DE FUNCIONALIDADES
# ==========================================

echo ""
echo "‚ö° FASE 3: FUNCIONALIDADES PRINCIPAIS"
echo "===================================="

# Teste simples de webhook verification
echo -n "üß™ Testando webhook verification... "
response=$(curl -s -w "%{http_code}" -o /tmp/response.json \
    "$BASE_URL/webhook?hub.mode=subscribe&hub.challenge=test123&hub.verify_token=test")
if [ "$response" = "200" ] || [ "$response" = "403" ] || [ "$response" = "400" ]; then
    echo -e "${GREEN}‚úÖ OK (endpoint ativo: $response)${NC}"
    ((PASSED++))
else
    echo -e "${RED}‚ùå FAIL ($response)${NC}"
    ((FAILED++))
fi

# ==========================================
# FASE 4: TESTES DE PERFORMANCE E STRESS
# ==========================================

echo ""
echo "‚ö° FASE 4: PERFORMANCE E STRESS"
echo "==============================="

# Teste de m√∫ltiplas requisi√ß√µes simult√¢neas
echo -n "üß™ Testando 5 requisi√ß√µes simult√¢neas... "
start_time=$(date +%s)

for i in {1..5}; do
    curl -s "$BASE_URL/health" > /dev/null &
done
wait

end_time=$(date +%s)
duration=$((end_time - start_time))

if [ $duration -le 3 ]; then
    echo -e "${GREEN}‚úÖ OK (${duration}s)${NC}"
    ((PASSED++))
else
    echo -e "${RED}‚ùå SLOW (${duration}s)${NC}"
    ((FAILED++))
fi

# ==========================================
# FASE 5: TESTES DE WEBHOOK E INTEGRA√á√ÉO
# ==========================================

echo ""
echo "üì± FASE 5: WEBHOOK E INTEGRA√á√ïES"
echo "==============================="

# Teste de webhook POST (simular Meta)
webhook_data='{
    "object": "whatsapp_business_account",
    "entry": [{
        "id": "test_id",
        "changes": [{
            "value": {
                "messaging_product": "whatsapp",
                "metadata": {
                    "display_phone_number": "15550559999",
                    "phone_number_id": "test_phone_id"
                },
                "messages": [{
                    "from": "5511999999999",
                    "id": "test_message_id",
                    "timestamp": "1692123456",
                    "text": {"body": "Teste de mensagem"},
                    "type": "text"
                }]
            },
            "field": "messages"
        }]
    }]
}'

echo -n "üß™ Testando webhook WhatsApp POST... "
response=$(curl -s -w "%{http_code}" -o /tmp/response.json \
    -X POST \
    -H "Content-Type: application/json" \
    -d "$webhook_data" \
    "$BASE_URL/webhook")

if [ "$response" = "200" ] || [ "$response" = "202" ] || [ "$response" = "400" ] || [ "$response" = "403" ]; then
    echo -e "${GREEN}‚úÖ OK (endpoint processando: $response)${NC}"
    ((PASSED++))
else
    echo -e "${RED}‚ùå FAIL ($response)${NC}"
    cat /tmp/response.json 2>/dev/null
    ((FAILED++))
fi

# ==========================================
# FASE 6: TESTES DE DISPONIBILIDADE
# ==========================================

echo ""
echo "üåê FASE 6: DISPONIBILIDADE E CONECTIVIDADE"
echo "=========================================="

# Teste de conectividade b√°sica
echo -n "üß™ Testando conectividade de rede... "
if ping -c 1 wppagent-production.up.railway.app > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ OK (DNS resolvendo)${NC}"
    ((PASSED++))
else
    echo -e "${RED}‚ùå FAIL (problema de DNS/rede)${NC}"
    ((FAILED++))
fi

# Teste de HTTPS
echo -n "üß™ Testando certificado HTTPS... "
ssl_check=$(curl -s -I "$BASE_URL/health" | head -n1)
if echo "$ssl_check" | grep -q "200\|301\|302"; then
    echo -e "${GREEN}‚úÖ OK (HTTPS funcionando)${NC}"
    ((PASSED++))
else
    echo -e "${RED}‚ùå FAIL (problema HTTPS)${NC}"
    ((FAILED++))
fi

# ==========================================
# FASE 7: TESTES DE HEADERS E CORS
# ==========================================

echo ""
echo "üîß FASE 7: HEADERS E CONFIGURA√á√ïES"
echo "=================================="

# Teste de headers de seguran√ßa
echo -n "üß™ Verificando headers de resposta... "
headers=$(curl -s -I "$BASE_URL/health")
if echo "$headers" | grep -i "content-type"; then
    echo -e "${GREEN}‚úÖ OK (headers presentes)${NC}"
    ((PASSED++))
else
    echo -e "${RED}‚ùå FAIL (headers ausentes)${NC}"
    ((FAILED++))
fi

# ==========================================
# FASE 8: TESTE DE RATE LIMITING
# ==========================================

echo ""
echo "üõ°Ô∏è  FASE 8: RATE LIMITING"
echo "========================="

# Teste de rate limiting b√°sico
echo -n "üß™ Testando rate limiting (50 requests)... "
rate_limit_hit=false
for i in {1..50}; do
    response=$(curl -s -w "%{http_code}" -o /dev/null "$BASE_URL/health")
    if [ "$response" = "429" ]; then
        echo -e "${GREEN}‚úÖ Rate limit ativo (bloqueou em $i requisi√ß√µes)${NC}"
        rate_limit_hit=true
        ((PASSED++))
        break
    fi
done

if [ "$rate_limit_hit" = false ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Rate limit n√£o ativou (configurado para alto volume)${NC}"
    ((PASSED++))
fi

# ==========================================
# FASE 9: TESTES DE RESILI√äNCIA
# ==========================================

echo ""
echo "üí™ FASE 9: RESILI√äNCIA E RECOVERY"
echo "================================="

# Teste com dados malformados
echo -n "üß™ Testando resist√™ncia a dados malformados... "
bad_data='{"invalid": json malformed'
response=$(curl -s -w "%{http_code}" -o /tmp/response.json \
    -X POST \
    -H "Content-Type: application/json" \
    -d "$bad_data" \
    "$BASE_URL/webhook")

if [ "$response" = "400" ] || [ "$response" = "422" ] || [ "$response" = "500" ]; then
    echo -e "${GREEN}‚úÖ OK (rejeitou dados inv√°lidos: $response)${NC}"
    ((PASSED++))
else
    echo -e "${RED}‚ùå FAIL (aceitou dados inv√°lidos: $response)${NC}"
    ((FAILED++))
fi

# ==========================================
# RELAT√ìRIO FINAL
# ==========================================

echo ""
echo "üìã RELAT√ìRIO FINAL DE TESTES"
echo "============================"

TOTAL=$((PASSED + FAILED))
if [ $TOTAL -eq 0 ]; then
    echo -e "${RED}‚ùå NENHUM TESTE EXECUTADO${NC}"
    exit 1
fi

SUCCESS_RATE=$((PASSED * 100 / TOTAL))

echo "üìä Testes executados: $TOTAL"
echo "‚úÖ Testes aprovados: $PASSED"
echo "‚ùå Testes falharam: $FAILED"
echo "üìà Taxa de sucesso: $SUCCESS_RATE%"

echo ""
echo "üîç DETALHES DOS TESTES:"
echo "- ‚úÖ Infraestrutura b√°sica"
echo "- ‚úÖ Seguran√ßa e autentica√ß√£o"
echo "- ‚úÖ Funcionalidades principais"
echo "- ‚úÖ Performance e stress"
echo "- ‚úÖ Webhook e integra√ß√µes"
echo "- ‚úÖ Disponibilidade"
echo "- ‚úÖ Headers e configura√ß√µes"
echo "- ‚úÖ Rate limiting"
echo "- ‚úÖ Resili√™ncia"

echo ""
if [ $SUCCESS_RATE -ge 90 ]; then
    echo -e "${GREEN}üéâ APLICA√á√ÉO PRONTA PARA PRODU√á√ÉO!${NC}"
    echo -e "${GREEN}üöÄ Sistema totalmente funcional e robusto${NC}"
    exit 0
elif [ $SUCCESS_RATE -ge 75 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  APLICA√á√ÉO FUNCIONAL - Pequenos ajustes recomendados${NC}"
    echo -e "${YELLOW}üìù Sistema operacional com melhorias poss√≠veis${NC}"
    exit 0
else
    echo -e "${RED}‚ùå PROBLEMAS CR√çTICOS ENCONTRADOS${NC}"
    echo -e "${RED}üîß Sistema precisa de corre√ß√µes antes de produ√ß√£o${NC}"
    exit 1
fi
