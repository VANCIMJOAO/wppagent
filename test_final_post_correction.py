#!/usr/bin/env python3
"""
üéØ TESTE FINAL P√ìS-CORRE√á√ÉO - Formata√ß√£o WhatsApp
===============================================
Testa se a corre√ß√£o cr√≠tica de formata√ß√£o funcionou em produ√ß√£o
"""

import asyncio
import asyncpg
import aiohttp
import time
from datetime import datetime
import json

async def test_formatting_post_correction():
    """
    Teste final ap√≥s corre√ß√£o cr√≠tica da formata√ß√£o
    """
    print("üéØ TESTE FINAL P√ìS-CORRE√á√ÉO - Formata√ß√£o WhatsApp")
    print("=" * 60)
    print("üîß Corre√ß√£o implementada: Quebras de linha preservadas")
    print("üìä Expectativa: 95%+ de formata√ß√£o perfeita")
    print("=" * 60)
    
    try:
        # Conectar ao banco
        db = await asyncpg.connect("postgresql://postgres:UGARTPCwAADBBeBLctoRnQXLsoUvLJxz@caboose.proxy.rlwy.net:13910/railway")
        
        tests = [
            ("Quais servi√ßos voc√™s oferecem?", "SERVI√áOS"),
            ("Qual o hor√°rio de funcionamento?", "HOR√ÅRIOS"),
            ("Onde voc√™s ficam localizados?", "LOCALIZA√á√ÉO")
        ]
        
        results = []
        
        for question, test_name in tests:
            print(f"\nüîç Testando {test_name}...")
            
            # Enviar mensagem via webhook
            url = "https://wppagent-production.up.railway.app/webhook"
            webhook_data = {
                "object": "whatsapp_business_account",
                "entry": [{
                    "id": "728348237027885",
                    "changes": [{
                        "value": {
                            "messaging_product": "whatsapp",
                            "metadata": {
                                "display_phone_number": "15551536026",
                                "phone_number_id": "728348237027885"
                            },
                            "messages": [{
                                "from": "5516991022255",
                                "id": f"wamid.test_{int(time.time())}",
                                "timestamp": str(int(time.time())),
                                "text": {"body": question},
                                "type": "text"
                            }]
                        },
                        "field": "messages"
                    }]
                }]
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=webhook_data, timeout=30) as response:
                    print(f"  üì° Status: {response.status}")
            
            # Aguardar processamento
            await asyncio.sleep(8)
            
            # Buscar resposta mais recente
            recent_responses = await db.fetch("""
                SELECT direction, content, created_at, message_type
                FROM messages
                WHERE user_id = 2
                AND direction = 'out'
                AND created_at > NOW() - INTERVAL '2 minutes'
                ORDER BY created_at DESC
                LIMIT 1
            """)
            
            if recent_responses:
                bot_response = recent_responses[0]['content']
                print(f"  üì± Resposta: {len(bot_response)} chars")
                
                # Analisar formata√ß√£o espec√≠fica por contexto
                if test_name == "SERVI√áOS":
                    # Elementos cr√≠ticos para servi√ßos
                    key_elements = [
                        'üìã', 'üí∞', '‚è∞', '‚ÑπÔ∏è', 'üìû',  # Emojis
                        '*', '_',  # Formata√ß√£o
                        '1.', '2.', '‚Ä¢',  # Estrutura
                        '\n\n'  # üî• CR√çTICO: Quebras duplas
                    ]
                elif test_name == "HOR√ÅRIOS":
                    # Elementos cr√≠ticos para hor√°rios
                    key_elements = [
                        'üè¢', 'üïò', 'üö´',  # Emojis
                        '*', '_',  # Formata√ß√£o
                        '\n', '-'  # Estrutura
                    ]
                elif test_name == "LOCALIZA√á√ÉO":
                    # Elementos cr√≠ticos para localiza√ß√£o
                    key_elements = [
                        'üè¢', 'üìç', 'üìû', 'üìß',  # Emojis
                        '*', '_',  # Formata√ß√£o
                        '\n'  # Estrutura
                    ]
                
                # Contar elementos encontrados
                found_elements = []
                total_count = 0
                
                for element in key_elements:
                    count = bot_response.count(element)
                    total_count += count
                    if count > 0:
                        found_elements.append(f"{element}:{count}x")
                
                # Calcular porcentagem baseada na presen√ßa de elementos
                found_unique = len([e for e in key_elements if e in bot_response])
                percentage = (found_unique / len(key_elements)) * 100
                
                print(f"  üìä Cobertura: {percentage:.1f}% ({found_unique}/{len(key_elements)})")
                print(f"  ‚úÖ Elementos: {found_elements}")
                
                # üî• VERIFICA√á√ÉO CR√çTICA: Quebras de linha
                line_breaks = bot_response.count('\n')
                if line_breaks > 0:
                    print(f"  üéâ QUEBRAS PRESERVADAS: {line_breaks} quebras de linha!")
                else:
                    print(f"  ‚ùå PROBLEMA: Nenhuma quebra de linha encontrada!")
                
                results.append({
                    "test": test_name,
                    "percentage": percentage,
                    "found_elements": found_unique,
                    "total_elements": len(key_elements),
                    "line_breaks": line_breaks,
                    "response_length": len(bot_response)
                })
                
                await asyncio.sleep(3)
            else:
                print("  ‚ùå Sem resposta")
        
        # Resultado final
        print(f"\nüèÜ RESULTADO FINAL P√ìS-CORRE√á√ÉO")
        print("=" * 50)
        
        if results:
            avg_percentage = sum(r["percentage"] for r in results) / len(results)
            total_line_breaks = sum(r["line_breaks"] for r in results)
            
            print(f"üìä FORMATA√á√ÉO M√âDIA: {avg_percentage:.1f}%")
            print(f"üî• QUEBRAS DE LINHA TOTAL: {total_line_breaks}")
            print()
            
            for result in results:
                line_status = "üéâ" if result["line_breaks"] > 5 else "‚ö†Ô∏è" if result["line_breaks"] > 0 else "‚ùå"
                status = "üéâ" if result["percentage"] >= 90 else "‚úÖ" if result["percentage"] >= 80 else "üëç" if result["percentage"] >= 70 else "‚ö†Ô∏è"
                
                print(f"{status} {result['test']}: {result['percentage']:.1f}% | {line_status} {result['line_breaks']} quebras")
            
            print()
            
            # An√°lise da corre√ß√£o
            if total_line_breaks >= 15:  # Esperamos pelo menos 15 quebras no total
                print("üéâ CORRE√á√ÉO FUNCIONOU PERFEITAMENTE!")
                print("‚úÖ Quebras de linha preservadas com sucesso")
                print("‚úÖ Formata√ß√£o WhatsApp completamente funcional")
                
                if avg_percentage >= 90:
                    print("üèÜ EXCEL√äNCIA: Formata√ß√£o quase perfeita!")
                elif avg_percentage >= 80:
                    print("ü•á SUCESSO: Formata√ß√£o de alta qualidade!")
                else:
                    print("üëç BOM: Formata√ß√£o funcional e melhorada!")
                
            elif total_line_breaks > 0:
                print("‚ö†Ô∏è CORRE√á√ÉO PARCIAL: Algumas quebras preservadas")
                print("üîç Verificar se todas as mudan√ßas foram deployadas")
                
            else:
                print("‚ùå CORRE√á√ÉO N√ÉO FUNCIONOU: Quebras ainda sendo removidas")
                print("üö® Verificar deployment ou outras sanitiza√ß√µes")
            
            print(f"\nüìà COMPARA√á√ÉO:")
            print(f"  Antes da corre√ß√£o: ~0 quebras, 70% formata√ß√£o")
            print(f"  Ap√≥s corre√ß√£o: {total_line_breaks} quebras, {avg_percentage:.1f}% formata√ß√£o")
            print(f"  Melhoria: +{total_line_breaks} quebras, +{avg_percentage-70:.1f} pontos")
        
        await db.close()
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_formatting_post_correction())
