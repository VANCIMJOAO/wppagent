#!/usr/bin/env python3
"""
üîç DIAGN√ìSTICO COMPLETO - Database WhatsApp LLM
==============================================
Verifica estrutura e dados do banco
"""

import asyncio
import asyncpg
import json
from datetime import datetime

class DatabaseDiagnostic:
    def __init__(self):
        self.DATABASE_URL = "postgresql://postgres:UGARTPCwAADBBeBLctoRnQXLsoUvLJxz@caboose.proxy.rlwy.net:13910/railway"
        
    async def connect(self):
        """Conecta ao banco"""
        try:
            self.db = await asyncpg.connect(self.DATABASE_URL)
            print("‚úÖ Conectado ao banco PostgreSQL")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao conectar: {e}")
            return False

    async def check_database_structure(self):
        """Verifica estrutura das tabelas"""
        print("\nüîç VERIFICANDO ESTRUTURA DO BANCO")
        print("=" * 50)
        
        try:
            # Listar todas as tabelas
            tables = await self.db.fetch("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """)
            
            print("üìã TABELAS ENCONTRADAS:")
            for table in tables:
                print(f"   üìÅ {table['table_name']}")
            
            # Verificar estrutura de cada tabela importante
            important_tables = ['users', 'conversations', 'messages', 'services', 'appointments', 'business_info']
            
            for table_name in important_tables:
                print(f"\nüìä ESTRUTURA DA TABELA: {table_name}")
                print("-" * 40)
                
                try:
                    columns = await self.db.fetch(f"""
                        SELECT column_name, data_type, is_nullable
                        FROM information_schema.columns 
                        WHERE table_name = '{table_name}'
                        ORDER BY ordinal_position
                    """)
                    
                    if columns:
                        for col in columns:
                            nullable = "NULL" if col['is_nullable'] == 'YES' else "NOT NULL"
                            print(f"   ‚Ä¢ {col['column_name']} ({col['data_type']}) {nullable}")
                    else:
                        print(f"   ‚ö†Ô∏è Tabela '{table_name}' n√£o encontrada")
                        
                except Exception as e:
                    print(f"   ‚ùå Erro ao verificar {table_name}: {e}")
                    
        except Exception as e:
            print(f"‚ùå Erro ao verificar estrutura: {e}")

    async def check_business_data(self):
        """Verifica dados de neg√≥cio configurados"""
        print("\nüè¢ VERIFICANDO DADOS DE NEG√ìCIO")
        print("=" * 50)
        
        # Verificar se existe tabela de informa√ß√µes do neg√≥cio
        try:
            business_info = await self.db.fetch("SELECT * FROM business_info LIMIT 5")
            if business_info:
                print("‚úÖ Dados de neg√≥cio encontrados:")
                for info in business_info:
                    print(f"   üìã {dict(info)}")
            else:
                print("‚ö†Ô∏è Nenhum dado de neg√≥cio encontrado na tabela business_info")
        except Exception as e:
            print(f"‚ùå Erro ao verificar business_info: {e}")
        
        # Verificar servi√ßos
        try:
            services = await self.db.fetch("SELECT * FROM services LIMIT 10")
            if services:
                print("\n‚úÖ Servi√ßos cadastrados:")
                for service in services:
                    print(f"   üîß {dict(service)}")
            else:
                print("\n‚ö†Ô∏è Nenhum servi√ßo encontrado na tabela services")
        except Exception as e:
            print(f"\n‚ùå Erro ao verificar services: {e}")
        
        # Verificar outras tabelas de configura√ß√£o
        config_tables = ['pricing', 'schedules', 'company_info', 'settings']
        for table in config_tables:
            try:
                data = await self.db.fetch(f"SELECT * FROM {table} LIMIT 3")
                if data:
                    print(f"\n‚úÖ Dados em {table}:")
                    for row in data:
                        print(f"   üìÑ {dict(row)}")
            except:
                print(f"\n‚ö†Ô∏è Tabela '{table}' n√£o encontrada ou vazia")

    async def check_recent_activity(self):
        """Verifica atividade recente"""
        print("\nüìà VERIFICANDO ATIVIDADE RECENTE")
        print("=" * 50)
        
        try:
            # Mensagens recentes
            recent_messages = await self.db.fetch("""
                SELECT 
                    m.direction, m.content, m.created_at, 
                    u.wa_id, u.nome
                FROM messages m
                JOIN users u ON m.user_id = u.id
                ORDER BY m.created_at DESC
                LIMIT 10
            """)
            
            print("üì± √öLTIMAS 10 MENSAGENS:")
            for msg in recent_messages:
                direction = "üì§" if msg['direction'] == 'in' else "üì•"
                print(f"   {direction} {msg['wa_id']}: {msg['content'][:50]}...")
                print(f"      ‚è∞ {msg['created_at']}")
        
        except Exception as e:
            print(f"‚ùå Erro ao verificar atividade: {e}")

    async def check_llm_integration(self):
        """Verifica integra√ß√£o com LLM"""
        print("\nü§ñ VERIFICANDO INTEGRA√á√ÉO LLM")
        print("=" * 50)
        
        try:
            # Verificar se h√° logs de LLM
            llm_logs = await self.db.fetch("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_name LIKE '%llm%' OR table_name LIKE '%ai%'
            """)
            
            if llm_logs:
                print("‚úÖ Tabelas relacionadas √† LLM:")
                for table in llm_logs:
                    print(f"   üß† {table['table_name']}")
            else:
                print("‚ö†Ô∏è Nenhuma tabela espec√≠fica de LLM encontrada")
            
            # Verificar configura√ß√µes
            try:
                config = await self.db.fetch("SELECT * FROM configurations WHERE key LIKE '%llm%' OR key LIKE '%openai%'")
                if config:
                    print("\n‚úÖ Configura√ß√µes LLM:")
                    for cfg in config:
                        print(f"   ‚öôÔ∏è {cfg['key']}: {cfg['value'][:50]}...")
            except:
                print("\n‚ö†Ô∏è Tabela 'configurations' n√£o encontrada")
                
        except Exception as e:
            print(f"‚ùå Erro ao verificar LLM: {e}")

    async def suggest_improvements(self):
        """Sugere melhorias baseadas na an√°lise"""
        print("\nüí° SUGEST√ïES DE MELHORIAS")
        print("=" * 50)
        
        suggestions = [
            "üìã Criar tabela 'business_info' com dados reais da empresa",
            "üîß Popular tabela 'services' com servi√ßos espec√≠ficos",
            "üí∞ Configurar tabela 'pricing' com pre√ßos reais",
            "üìç Adicionar endere√ßo e contatos reais",
            "‚è∞ Configurar hor√°rios de funcionamento espec√≠ficos",
            "ü§ñ Verificar se LLM est√° consultando banco corretamente",
            "üìä Implementar m√©tricas de qualidade de resposta",
            "üîÑ Criar sistema de feedback das respostas"
        ]
        
        for suggestion in suggestions:
            print(f"   {suggestion}")

    async def generate_diagnosis_report(self):
        """Gera relat√≥rio completo de diagn√≥stico"""
        print("\nüìã GERANDO RELAT√ìRIO DE DIAGN√ìSTICO")
        print("=" * 50)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # Coletar dados para relat√≥rio
        diagnosis_data = {
            "timestamp": datetime.now().isoformat(),
            "database_connection": "successful",
            "tables_found": [],
            "business_data_status": "needs_investigation",
            "llm_integration_status": "needs_investigation",
            "recommendations": []
        }
        
        # Salvar relat√≥rio
        filename = f"database_diagnosis_{timestamp}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(diagnosis_data, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"üìÑ Diagn√≥stico salvo: {filename}")

    async def run_full_diagnosis(self):
        """Executa diagn√≥stico completo"""
        print("üîç INICIANDO DIAGN√ìSTICO COMPLETO DO BANCO")
        print("=" * 60)
        
        if not await self.connect():
            return False
        
        await self.check_database_structure()
        await self.check_business_data()
        await self.check_recent_activity()
        await self.check_llm_integration()
        await self.suggest_improvements()
        await self.generate_diagnosis_report()
        
        print("\n‚úÖ DIAGN√ìSTICO CONCLU√çDO!")
        return True

    async def close(self):
        """Fecha conex√£o"""
        try:
            if hasattr(self, 'db'):
                await self.db.close()
                print("‚úÖ Conex√£o fechada")
        except Exception as e:
            print(f"‚ùå Erro ao fechar: {e}")


async def main():
    """Fun√ß√£o principal"""
    diagnostic = DatabaseDiagnostic()
    
    try:
        await diagnostic.run_full_diagnosis()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Diagn√≥stico interrompido")
    except Exception as e:
        print(f"\nüí• Erro: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await diagnostic.close()


if __name__ == "__main__":
    print("üîç DIAGN√ìSTICO COMPLETO - Database WhatsApp LLM")
    print("=" * 60)
    print("üéØ Este script vai:")
    print("   ‚úÖ Verificar estrutura do banco")
    print("   ‚úÖ Analisar dados de neg√≥cio")
    print("   ‚úÖ Verificar integra√ß√£o LLM")
    print("   ‚úÖ Sugerir melhorias")
    print("=" * 60)
    
    input("‚ñ∂Ô∏è Pressione ENTER para iniciar diagn√≥stico...")
    
    asyncio.run(main())