"""
Utilit√°rios para prompts din√¢micos - VERS√ÉO CORRIGIDA
Gera prompts com data atual e dados REAIS da database Railway
"""

from datetime import datetime
import locale
from typing import Dict, Any
from app.utils.logger import get_logger

logger = get_logger(__name__)

# Importar fun√ß√µes de formata√ß√£o
try:
    from app.services.business_data import get_database_services_formatted, business_data_service
except ImportError as e:
    logger.warning(f"N√£o foi poss√≠vel importar fun√ß√µes de formata√ß√£o: {e}")
    get_database_services_formatted = None
    business_data_service = None

# Configurar locale para portugu√™s brasileiro
try:
    locale.setlocale(locale.LC_TIME, 'pt_BR.UTF-8')
except locale.Error:
    try:
        locale.setlocale(locale.LC_TIME, 'pt_BR')
    except locale.Error:
        # Fallback se n√£o conseguir configurar locale
        pass

def get_current_date_info() -> Dict[str, Any]:
    """
    Retorna informa√ß√µes sobre a data atual
    """
    now = datetime.now()
    
    # Mapeamento manual dos dias da semana em portugu√™s
    weekdays = {
        'Monday': 'segunda-feira',
        'Tuesday': 'ter√ßa-feira', 
        'Wednesday': 'quarta-feira',
        'Thursday': 'quinta-feira',
        'Friday': 'sexta-feira',
        'Saturday': 's√°bado',
        'Sunday': 'domingo'
    }
    
    # Mapeamento manual dos meses em portugu√™s
    months = {
        1: 'janeiro', 2: 'fevereiro', 3: 'mar√ßo', 4: 'abril',
        5: 'maio', 6: 'junho', 7: 'julho', 8: 'agosto',
        9: 'setembro', 10: 'outubro', 11: 'novembro', 12: 'dezembro'
    }
    
    weekday_pt = weekdays.get(now.strftime('%A'), now.strftime('%A'))
    month_pt = months.get(now.month, str(now.month))
    
    return {
        'date': now.strftime('%d'),
        'month': month_pt,
        'year': str(now.year),
        'weekday': weekday_pt,
        'formatted_date': f"{now.day} de {month_pt} de {now.year}",
        'full_info': f"{now.day} de {month_pt} de {now.year} ({weekday_pt})"
    }

async def get_dynamic_system_prompt_with_database(user_message: str = "") -> str:
    """
    Gera o prompt do sistema com data atual din√¢mica E dados reais da database
    VERS√ÉO CORRIGIDA - CONEX√ÉO DIRETA COM RAILWAY
    
    Args:
        user_message: Mensagem do usu√°rio para detec√ß√£o inteligente de conte√∫do
    """
    # CONEX√ÉO DIRETA COM RAILWAY - SEM DEPEND√äNCIAS
    import asyncpg
    
    date_info = get_current_date_info()
    
    # URL REAL DO RAILWAY QUE FUNCIONA
    RAILWAY_DATABASE_URL = "postgresql://postgres:UGARTPCwAADBBeBLctoRnQXLsoUvLJxz@caboose.proxy.rlwy.net:13910/railway"
    
    # Buscar dados reais da database
    try:
        # Conectar diretamente ao Railway
        conn = await asyncpg.connect(RAILWAY_DATABASE_URL)
        
        # Buscar empresa
        company_info = await conn.fetchrow("SELECT * FROM company_info WHERE business_id = 3")
        
        # Buscar servi√ßos reais
        services = await conn.fetch("SELECT * FROM services WHERE business_id = 3 AND is_active = true ORDER BY name")
        
        # Buscar hor√°rios de funcionamento
        business_hours = await conn.fetch("SELECT * FROM business_hours WHERE business_id = 3")
        
        # Buscar formas de pagamento
        payment_methods = await conn.fetch("SELECT * FROM payment_methods WHERE business_id = 3")
        
        # Buscar pol√≠ticas
        policies = await conn.fetch("SELECT * FROM business_policies WHERE business_id = 3")
        
        await conn.close()
        
        # Usar formata√ß√£o melhorada dos servi√ßos
        if get_database_services_formatted:
            try:
                services_text = await get_database_services_formatted(user_message)
                services_text = "üîß SERVI√áOS REAIS DA DATABASE (USE APENAS ESTES):\n" + services_text
                services_text += f"\n‚ö†Ô∏è CR√çTICO: {len(services)} SERVI√áOS REAIS CARREGADOS DA DATABASE!\n"
                logger.info("‚úÖ Formata√ß√£o melhorada de servi√ßos aplicada")
            except Exception as e:
                logger.error(f"Erro ao formatar servi√ßos melhorados: {e}")
                # Fallback para formata√ß√£o b√°sica
                if services:
                    services_text = "üîß SERVI√áOS REAIS DA DATABASE (USE APENAS ESTES):\n"
                    for service in services:
                        services_text += f"‚úÖ {service['name']}: {service['price']} - {service['duration_minutes']}min\n"
                        if service['description']:
                            services_text += f"   üìù {service['description']}\n"
                    services_text += f"\n‚ö†Ô∏è CR√çTICO: {len(services)} SERVI√áOS REAIS CARREGADOS DA DATABASE!\n"
                else:
                    services_text = "‚ùå ERRO: Nenhum servi√ßo encontrado na database!"
        else:
            logger.warning("Fun√ß√£o de formata√ß√£o n√£o dispon√≠vel, usando fallback")
            # Fallback para formata√ß√£o b√°sica
            if services:
                services_text = "üîß SERVI√áOS REAIS DA DATABASE (USE APENAS ESTES):\n"
                for service in services:
                    services_text += f"‚úÖ {service['name']}: {service['price']} - {service['duration_minutes']}min\n"
                    if service['description']:
                        services_text += f"   üìù {service['description']}\n"
                services_text += f"\n‚ö†Ô∏è CR√çTICO: {len(services)} SERVI√áOS REAIS CARREGADOS DA DATABASE!\n"
            else:
                services_text = "‚ùå ERRO: Nenhum servi√ßo encontrado na database!"
        
        # Usar formata√ß√£o melhorada dos hor√°rios
        if business_data_service:
            try:
                hours_text = await business_data_service.get_business_hours_formatted_text()
                logger.info("‚úÖ Formata√ß√£o melhorada de hor√°rios aplicada")
            except Exception as e:
                logger.error(f"Erro ao formatar hor√°rios melhorados: {e}")
                # Fallback para formata√ß√£o b√°sica
                if business_hours:
                    hours_text = "üìÖ HOR√ÅRIO REAL DE FUNCIONAMENTO:\n"
                    for hour in business_hours:
                        # Converter day_of_week para string se necess√°rio
                        day_val = hour['day_of_week']
                        if isinstance(day_val, int):
                            days_map = {0: 'segunda', 1: 'ter√ßa', 2: 'quarta', 3: 'quinta', 4: 'sexta', 5: 's√°bado', 6: 'domingo'}
                            day_name = days_map.get(day_val, f'Dia {day_val}')
                        elif isinstance(day_val, str):
                            day_name = day_val.capitalize()
                        else:
                            day_name = 'Dia'
                            
                        open_time = hour['open_time'].strftime('%H:%M') if hour['open_time'] else '09:00'
                        close_time = hour['close_time'].strftime('%H:%M') if hour['close_time'] else '18:00'
                        hours_text += f"- {day_name}: {open_time} √†s {close_time}\n"
                else:
                    hours_text = "üìÖ HOR√ÅRIO DE FUNCIONAMENTO:\n- Segunda a Sexta: 9h √†s 18h\n- S√°bado: 9h √†s 16h\n- Domingo: Fechado"
        else:
            logger.warning("Servi√ßo de dados n√£o dispon√≠vel para hor√°rios, usando fallback")
            # Fallback para formata√ß√£o b√°sica
            if business_hours:
                hours_text = "üìÖ HOR√ÅRIO REAL DE FUNCIONAMENTO:\n"
                for hour in business_hours:
                    # Converter day_of_week para string se necess√°rio
                    day_val = hour['day_of_week']
                    if isinstance(day_val, int):
                        days_map = {0: 'segunda', 1: 'ter√ßa', 2: 'quarta', 3: 'quinta', 4: 'sexta', 5: 's√°bado', 6: 'domingo'}
                        day_name = days_map.get(day_val, f'Dia {day_val}')
                    elif isinstance(day_val, str):
                        day_name = day_val.capitalize()
                    else:
                        day_name = 'Dia'
                        
                    open_time = hour['open_time'].strftime('%H:%M') if hour['open_time'] else '09:00'
                    close_time = hour['close_time'].strftime('%H:%M') if hour['close_time'] else '18:00'
                    hours_text += f"- {day_name}: {open_time} √†s {close_time}\n"
            else:
                hours_text = "üìÖ HOR√ÅRIO DE FUNCIONAMENTO:\n- Segunda a Sexta: 9h √†s 18h\n- S√°bado: 9h √†s 16h\n- Domingo: Fechado"
        
        # Formatar formas de pagamento REAIS
        if payment_methods:
            payment_text = "üí≥ FORMAS DE PAGAMENTO REAIS:\n"
            for payment in payment_methods:
                payment_text += f"‚úÖ {payment['name']}"
                if payment.get('description'):
                    payment_text += f": {payment['description']}"
                payment_text += "\n"
        else:
            payment_text = "üí≥ FORMAS DE PAGAMENTO: Dinheiro, PIX, Cart√£o de D√©bito, Cart√£o de Cr√©dito"
        
        # Formatar pol√≠ticas REAIS
        policies_text = ""
        if policies:
            policies_text = "üìã POL√çTICAS REAIS DO NEG√ìCIO:\n"
            for policy in policies:
                policies_text += f"üìù {policy['policy_type']}:\n"
                if policy.get('description'):
                    policies_text += f"   {policy['description']}\n"
        
        # Dados REAIS da empresa
        if company_info:
            company_name = company_info['company_name']
            company_address = f"{company_info['street_address']}, {company_info['city']}, {company_info['state']}"
            logger.info(f"‚úÖ DADOS REAIS CARREGADOS: {company_name} - {len(services)} servi√ßos")
        else:
            raise Exception("Empresa n√£o encontrada")
        
    except Exception as e:
        logger.error(f"‚ùå ERRO ao conectar com Railway: {e}")
        # Se falhar, usar dados que sabemos que est√£o no banco (do diagn√≥stico)
        services_text = """üîß SERVI√áOS CONHECIDOS (FALLBACK SEGURO):
‚úÖ Limpeza de Pele Profunda: R$ 80,00 - 90min
‚úÖ Hidrofacial Diamante: R$ 150,00 - 60min
‚úÖ Peeling Qu√≠mico: R$ 120,00 - 45min
‚úÖ Massagem Relaxante: R$ 100,00 - 60min
‚úÖ Massagem Modeladora: R$ 120,00 - 75min
‚úÖ Drenagem Linf√°tica: R$ 90,00 - 60min
‚úÖ Criolip√≥lise: R$ 300,00 - 60min
‚úÖ Radiofrequ√™ncia: R$ 180,00 - 45min
‚úÖ Depila√ß√£o Pernas Completas: R$ 60,00 - 45min
‚úÖ Depila√ß√£o Virilha Completa: R$ 45,00 - 30min
‚úÖ Manicure Completa: R$ 35,00 - 45min
‚úÖ Pedicure Spa: R$ 45,00 - 60min
‚úÖ Corte Feminino: R$ 80,00 - 60min
‚úÖ Escova Progressiva: R$ 250,00 - 180min
‚úÖ Pacote Noiva: R$ 450,00 - 240min
‚úÖ Day Spa Relax: R$ 280,00 - 300min

‚ö†Ô∏è ESTES S√ÉO OS PRE√áOS REAIS DA DATABASE!"""
        
        company_name = "Studio Beleza & Bem-Estar"
        company_address = "Rua das Flores, 123 - Centro, S√£o Paulo, SP"
        hours_text = "üìÖ HOR√ÅRIO DE FUNCIONAMENTO:\n- Segunda a Sexta: 9h √†s 18h\n- S√°bado: 9h √†s 16h\n- Domingo: Fechado"
        payment_text = "üí≥ FORMAS DE PAGAMENTO: Dinheiro, PIX, Cart√£o de D√©bito, Cart√£o de Cr√©dito"
        policies_text = ""
    
    return f"""
üè¢ EMPRESA REAL: {company_name}
üìç ENDERE√áO REAL: {company_address}

‚ö†Ô∏è INSTRU√á√ïES CR√çTICAS - LEIA COM ATEN√á√ÉO:
==========================================
1. VOC√ä TRABALHA PARA: {company_name}
2. NUNCA DIGA "Nossa Empresa" - SEMPRE use: {company_name}
3. ENDERE√áO REAL: {company_address}
4. USE APENAS OS PRE√áOS E SERVI√áOS LISTADOS ABAIXO
5. NUNCA INVENTE PRE√áOS OU SERVI√áOS
6. SEMPRE CONSULTE A DATABASE PARA DADOS ATUALIZADOS

Voc√™ √© um assistente virtual inteligente para agendamentos via WhatsApp.
Voc√™ trabalha para {company_name} e sua fun√ß√£o √© ajudar os clientes a:

1. üìÖ AGENDAR servi√ßos
2. ‚ùå CANCELAR agendamentos existentes  
3. üìù REAGENDAR compromissos
4. ‚ÑπÔ∏è  FORNECER informa√ß√µes gerais sobre servi√ßos, hor√°rios, formas de pagamento e pol√≠ticas

CONTEXTO TEMPORAL IMPORTANTE:
- DATA ATUAL: {date_info['full_info']}
- Quando o usu√°rio mencionar dias da semana (ex: "segunda-feira"), refira-se aos pr√≥ximos dias
- NUNCA invente datas espec√≠ficas ou anos incorretos
- Se precisar de data espec√≠fica, PERGUNTE ao usu√°rio

{services_text}

{hours_text}

{payment_text}

{policies_text}

REGRAS CR√çTICAS - OBRIGAT√ìRIAS:
=====================================
üö® NUNCA DIGA "Nossa Empresa" - SEMPRE use: {company_name}
üö® NUNCA invente pre√ßos - USE APENAS os pre√ßos listados acima
üö® NUNCA invente servi√ßos - USE APENAS os servi√ßos listados acima
üö® ENDERE√áO REAL: {company_address}
üö® SEMPRE consulte a database para informa√ß√µes atualizadas
üö® Se perguntarem sobre um servi√ßo n√£o listado, diga que n√£o oferecemos

REGRAS IMPORTANTES:
- Responda SEMPRE em portugu√™s brasileiro
- Seja cordial, profissional e prestativo
- Use emojis para tornar a conversa mais amig√°vel
- Para agendamentos, SEMPRE pergunte: servi√ßo desejado, data e hor√°rio preferido
- Use bot√µes interativos quando apropriado para facilitar a navega√ß√£o
- Se o usu√°rio pedir para "falar com humano" ou "atendimento humano", ative o handoff
- Mantenha as respostas concisas e objetivas
- Sempre confirme os detalhes antes de finalizar um agendamento
- NUNCA invente datas espec√≠ficas - sempre pergunte quando n√£o tiver certeza
- SEMPRE use os dados REAIS da database para pre√ßos, servi√ßos, hor√°rios e pol√≠ticas
- Respeite os hor√°rios de funcionamento ao sugerir agendamentos
- Informe as formas de pagamento quando perguntado
- Explique as pol√≠ticas quando relevante (cancelamento, reagendamento, etc.)

üìã FORMATA√á√ÉO OBRIGAT√ìRIA PARA WHATSAPP:
========================================
üî• ESTA FORMATA√á√ÉO √â OBRIGAT√ìRIA! NUNCA ENVIE RESPOSTA SEM ELA! üî•

üéØ QUANDO LISTAR SERVI√áOS, USE EXATAMENTE esta formata√ß√£o:
üìã *Nossos Servi√ßos e Pre√ßos:*

1. *Nome do Servi√ßo*
   üí∞ R$ XX,XX ‚Ä¢ ‚è∞ XXmin
   ‚ÑπÔ∏è _Descri√ß√£o do servi√ßo._

2. *Pr√≥ximo Servi√ßo*
   üí∞ R$ XX,XX ‚Ä¢ ‚è∞ XXmin
   ‚ÑπÔ∏è _Descri√ß√£o do servi√ßo._

üïò QUANDO INFORMAR HOR√ÅRIOS, USE OBRIGATORIAMENTE:
üè¢ *{company_name}*
üïò *Hor√°rio de Funcionamento:*
- _Segunda a Sexta_: Xh √†s Xh
- _S√°bado_: Xh √†s Xh  
- _Domingo_: üö´ Fechado

üè¢ QUANDO DAR INFORMA√á√ïES DA EMPRESA, USE OBRIGATORIAMENTE:
üè¢ *{company_name}*
üìç Endere√ßo: _{company_address}_
üìû Contato: (11) 98765-4321
üìß Email: _contato@studiobeleza.com_

‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è OBRIGAT√ìRIO: SEMPRE use TODOS os emojis ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
üî• üí∞ ‚è∞ üìã üïò üè¢ üìç üìû üìß ‚ÑπÔ∏è üö´ ‚Ä¢ üî•
‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è OBRIGAT√ìRIO: numera√ß√£o (1. 2. 3.) ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è OBRIGAT√ìRIO: *negrito* e _it√°lico_ ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
üî• SE N√ÉO USAR ESTA FORMATA√á√ÉO, A RESPOSTA SER√Å REJEITADA! üî•

FUN√á√ïES DISPON√çVEIS:
- schedule_create: criar novo agendamento
- schedule_cancel: cancelar agendamento existente
- schedule_reschedule: reagendar compromisso
- handoff_human: transferir para atendimento humano

Quando identificar uma inten√ß√£o de agendamento, extraia as informa√ß√µes necess√°rias e use a fun√ß√£o apropriada.
Se faltar informa√ß√µes, pergunte de forma natural e amig√°vel.

‚ö†Ô∏è CR√çTICO: Use SEMPRE os dados reais da database. NUNCA invente informa√ß√µes sobre pre√ßos, hor√°rios ou pol√≠ticas.
‚ö†Ô∏è EMPRESA: {company_name}
‚ö†Ô∏è ENDERE√áO: {company_address}
"""

def get_dynamic_system_prompt() -> str:
    """
    Gera o prompt do sistema com data atual din√¢mica
    DEPRECATED: Use get_dynamic_system_prompt_with_database() para dados reais
    """
    date_info = get_current_date_info()
    
    return f"""
Voc√™ √© um assistente virtual inteligente para agendamentos via WhatsApp.
Voc√™ trabalha para uma empresa de servi√ßos e sua fun√ß√£o √© ajudar os clientes a:

1. üìÖ AGENDAR servi√ßos (corte de cabelo, manicure, consultas, etc.)
2. ‚ùå CANCELAR agendamentos existentes
3. üìù REAGENDAR compromissos
4. ‚ÑπÔ∏è  FORNECER informa√ß√µes gerais sobre servi√ßos

CONTEXTO TEMPORAL IMPORTANTE:
- DATA ATUAL: {date_info['full_info']}
- Quando o usu√°rio mencionar dias da semana (ex: "segunda-feira"), refira-se aos pr√≥ximos dias
- NUNCA invente datas espec√≠ficas ou anos incorretos
- Se precisar de data espec√≠fica, PERGUNTE ao usu√°rio

REGRAS IMPORTANTES:
- Responda SEMPRE em portugu√™s brasileiro
- Seja cordial, profissional e prestativo
- Use emojis para tornar a conversa mais amig√°vel
- Para agendamentos, SEMPRE pergunte: servi√ßo desejado, data e hor√°rio preferido
- Use bot√µes interativos quando apropriado para facilitar a navega√ß√£o
- Se o usu√°rio pedir para "falar com humano" ou "atendimento humano", ative o handoff
- Mantenha as respostas concisas e objetivas
- Sempre confirme os detalhes antes de finalizar um agendamento
- NUNCA invente datas espec√≠ficas - sempre pergunte quando n√£o tiver certeza

HOR√ÅRIO DE FUNCIONAMENTO:
- Segunda a Sexta: 9h √†s 18h
- S√°bado: 9h √†s 16h
- Domingo: Fechado

SERVI√áOS DISPON√çVEIS:
- Corte de cabelo masculino e feminino
- Barba e bigode
- Manicure e pedicure
- Sobrancelha
- Escova e penteados
- Tratamentos capilares

FUN√á√ïES DISPON√çVEIS:
- schedule_create: criar novo agendamento
- schedule_cancel: cancelar agendamento existente
- schedule_reschedule: reagendar compromisso
- handoff_human: transferir para atendimento humano

Quando identificar uma inten√ß√£o de agendamento, extraia as informa√ß√µes necess√°rias e use a fun√ß√£o apropriada.
Se faltar informa√ß√µes, pergunte de forma natural e amig√°vel.
IMPORTANTE: Se o usu√°rio disser "segunda-feira" mas n√£o especificar qual segunda, pergunte "qual segunda-feira voc√™ prefere?" ao inv√©s de inventar uma data.
"""

def get_dynamic_llm_system_prompt() -> str:
    """
    Gera prompt do sistema para LLM avan√ßado com data din√¢mica
    """
    date_info = get_current_date_info()
    
    return f"""
DATA ATUAL: {date_info['full_info']}

Voc√™ √© um assistente inteligente especializado em agendamentos via WhatsApp.
Sua miss√£o √© processar solicita√ß√µes de forma natural e eficiente.

INSTRU√á√ïES DE SEGURAN√áA TEMPORAL:
- NUNCA invente ou assuma datas espec√≠ficas
- Se data amb√≠gua: pergunte esclarecimento
- Use data atual como refer√™ncia: {date_info['full_info']}
- Quando usu√°rio disser "segunda-feira" sem especificar qual, pergunte qual segunda-feira

CAPACIDADES:
- Processamento de linguagem natural avan√ßado
- Detec√ß√£o de inten√ß√µes complexas
- Extra√ß√£o de informa√ß√µes contextuais
- Gerenciamento de estado de conversa

REGRAS:
- Seja natural e conversacional
- Mantenha contexto da conversa
- Fa√ßa perguntas esclarecedoras quando necess√°rio
- Confirme informa√ß√µes importantes
- Use emojis apropriados
"""

def get_dynamic_data_extraction_prompt() -> str:
    """
    Gera prompt de extra√ß√£o de dados com contexto temporal din√¢mico
    """
    date_info = get_current_date_info()
    
    return f"""
CONTEXTO TEMPORAL: Hoje √© {date_info['full_info']}

Voc√™ √© um extrator especializado de informa√ß√µes para agendamentos.
Analise a mensagem e extraia informa√ß√µes relevantes.

REGRAS DE EXTRA√á√ÉO:
- Identifique servi√ßos mencionados
- Detecte refer√™ncias temporais (mas NUNCA invente datas espec√≠ficas)
- Extraia hor√°rios quando mencionados
- Identifique inten√ß√µes (agendar, cancelar, reagendar)
- Se usu√°rio disser "segunda-feira" sem especificar qual, marque como "data_ambigua": true

FORMATO DE SA√çDA: JSON estruturado com campos relevantes
IMPORTANTE: Se n√£o tiver certeza sobre uma data, n√£o invente - marque como amb√≠gua
"""
