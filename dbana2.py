#!/usr/bin/env python3
"""
üîß CORRE√á√ÉO DA INTEGRA√á√ÉO LLM - Database
========================================
For√ßa o bot a usar dados reais do banco
"""

import asyncio
import asyncpg
import json
from datetime import datetime

class LLMDatabaseIntegrationFixer:
    def __init__(self):
        self.DATABASE_URL = "postgresql://postgres:UGARTPCwAADBBeBLctoRnQXLsoUvLJxz@caboose.proxy.rlwy.net:13910/railway"
        
    async def connect(self):
        """Conecta ao banco"""
        try:
            self.db = await asyncpg.connect(self.DATABASE_URL)
            print("‚úÖ Conectado ao banco PostgreSQL")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao conectar: {e}")
            return False

    async def get_business_data(self):
        """Extrai todos os dados do neg√≥cio"""
        print("\nüìã EXTRAINDO DADOS REAIS DO NEG√ìCIO")
        print("=" * 50)
        
        business_data = {}
        
        try:
            # Informa√ß√µes da empresa
            company_info = await self.db.fetchrow("SELECT * FROM company_info WHERE business_id = 3")
            
            if company_info:
                business_data['company'] = dict(company_info)
                print("‚úÖ Dados da empresa extra√≠dos:")
                print(f"   üè¢ Nome: {company_info['company_name']}")
                print(f"   üìç Endere√ßo: {company_info['street_address']}, {company_info['city']}")
                print(f"   üìû WhatsApp: {company_info['whatsapp_number']}")
                print(f"   üìß Email: {company_info['email_contact']}")
            
            # Servi√ßos
            services = await self.db.fetch("SELECT * FROM services WHERE business_id = 3 AND is_active = true")
            
            if services:
                business_data['services'] = [dict(service) for service in services]
                print(f"\n‚úÖ {len(services)} servi√ßos extra√≠dos:")
                for service in services:
                    print(f"   üîß {service['name']} - {service['price']} ({service['duration_minutes']}min)")
            
            # Hor√°rios de funcionamento
            try:
                business_hours = await self.db.fetch("SELECT * FROM business_hours WHERE business_id = 3")
                if business_hours:
                    business_data['hours'] = [dict(hour) for hour in business_hours]
                    print(f"\n‚úÖ Hor√°rios de funcionamento extra√≠dos: {len(business_hours)} registros")
            except:
                print("\n‚ö†Ô∏è Tabela business_hours n√£o encontrada")
            
            # Pol√≠ticas do neg√≥cio
            try:
                policies = await self.db.fetch("SELECT * FROM business_policies WHERE business_id = 3")
                if policies:
                    business_data['policies'] = [dict(policy) for policy in policies]
                    print(f"\n‚úÖ Pol√≠ticas extra√≠das: {len(policies)} registros")
            except:
                print("\n‚ö†Ô∏è Tabela business_policies n√£o encontrada")
            
            # M√©todos de pagamento
            try:
                payment_methods = await self.db.fetch("SELECT * FROM payment_methods WHERE business_id = 3")
                if payment_methods:
                    business_data['payment_methods'] = [dict(pm) for pm in payment_methods]
                    print(f"\n‚úÖ M√©todos de pagamento: {len(payment_methods)} registros")
            except:
                print("\n‚ö†Ô∏è Tabela payment_methods n√£o encontrada")
            
            return business_data
            
        except Exception as e:
            print(f"‚ùå Erro ao extrair dados: {e}")
            return {}

    async def check_bot_configuration(self):
        """Verifica configura√ß√£o do bot"""
        print("\nü§ñ VERIFICANDO CONFIGURA√á√ÉO DO BOT")
        print("=" * 50)
        
        try:
            bot_config = await self.db.fetch("SELECT * FROM bot_configurations WHERE business_id = 3")
            
            if bot_config:
                print("‚úÖ Configura√ß√µes do bot encontradas:")
                for config in bot_config:
                    print(f"   ‚öôÔ∏è {dict(config)}")
                return [dict(config) for config in bot_config]
            else:
                print("‚ö†Ô∏è Nenhuma configura√ß√£o espec√≠fica do bot encontrada")
                return []
                
        except Exception as e:
            print(f"‚ùå Erro ao verificar configura√ß√£o: {e}")
            return []

    async def test_database_queries(self):
        """Testa queries que o bot deveria fazer"""
        print("\nüß™ TESTANDO QUERIES QUE O BOT DEVERIA FAZER")
        print("=" * 50)
        
        test_scenarios = [
            {
                "question": "Quais servi√ßos voc√™s oferecem?",
                "query": "SELECT name, description, price, duration_minutes FROM services WHERE business_id = 3 AND is_active = true",
                "expected": "Lista de servi√ßos reais"
            },
            {
                "question": "Qual o endere√ßo?", 
                "query": "SELECT street_address, city, state FROM company_info WHERE business_id = 3",
                "expected": "Rua das Flores, 123 - Centro, S√£o Paulo"
            },
            {
                "question": "Quanto custa limpeza de pele?",
                "query": "SELECT price FROM services WHERE business_id = 3 AND name ILIKE '%limpeza%'",
                "expected": "R$ 80,00"
            }
        ]
        
        for scenario in test_scenarios:
            print(f"\n‚ùì Pergunta: {scenario['question']}")
            print(f"üîç Query: {scenario['query']}")
            
            try:
                result = await self.db.fetch(scenario['query'])
                if result:
                    print(f"‚úÖ Resultado: {[dict(row) for row in result]}")
                    print(f"‚úÖ Esperado: {scenario['expected']}")
                else:
                    print("‚ùå Nenhum resultado encontrado")
            except Exception as e:
                print(f"‚ùå Erro na query: {e}")

    async def generate_llm_prompt_template(self, business_data):
        """Gera template de prompt para LLM usar dados reais"""
        print("\nüìù GERANDO TEMPLATE DE PROMPT PARA LLM")
        print("=" * 50)
        
        company = business_data.get('company', {})
        services = business_data.get('services', [])
        
        prompt_template = f"""
DADOS REAIS DA EMPRESA (SEMPRE CONSULTE BANCO DE DADOS):
========================================================

üè¢ EMPRESA: {company.get('company_name', 'Studio Beleza & Bem-Estar')}
üìç ENDERE√áO: {company.get('street_address', '')}, {company.get('city', '')}, {company.get('state', '')}
üìû WHATSAPP: {company.get('whatsapp_number', '')}
üìß EMAIL: {company.get('email_contact', '')}
üåê SITE: {company.get('website', '')}
üì± INSTAGRAM: {company.get('instagram', '')}

üí¨ MENSAGEM DE BOAS-VINDAS:
{company.get('welcome_message', '')}

üîß SERVI√áOS DISPON√çVEIS:
"""
        
        for service in services:
            prompt_template += f"""
- {service['name']}: {service['price']} ({service['duration_minutes']}min)
  Descri√ß√£o: {service['description']}
"""
        
        prompt_template += f"""

‚ö†Ô∏è INSTRU√á√ïES CR√çTICAS PARA LLM:
================================
1. SEMPRE consulte o banco de dados antes de responder
2. USE APENAS dados reais da empresa acima
3. N√ÉO invente pre√ßos, endere√ßos ou informa√ß√µes
4. Para servi√ßos: consulte tabela 'services' WHERE business_id = 3
5. Para empresa: consulte tabela 'company_info' WHERE business_id = 3
6. Sempre use o nome real: "{company.get('company_name', 'Studio Beleza & Bem-Estar')}"
7. Sempre use endere√ßo real: "{company.get('street_address', '')}"

üìã QUERIES ESSENCIAIS:
- Servi√ßos: SELECT * FROM services WHERE business_id = 3 AND is_active = true
- Empresa: SELECT * FROM company_info WHERE business_id = 3
- Hor√°rios: SELECT * FROM business_hours WHERE business_id = 3
- Pol√≠ticas: SELECT * FROM business_policies WHERE business_id = 3
"""
        
        # Salvar template
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"llm_prompt_template_{timestamp}.txt"
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(prompt_template)
        
        print(f"üìÑ Template salvo: {filename}")
        print("\nüìã PREVIEW DO TEMPLATE:")
        print(prompt_template[:800] + "...")
        
        return prompt_template

    async def create_integration_test(self):
        """Cria teste de integra√ß√£o real"""
        print("\nüß™ CRIANDO TESTE DE INTEGRA√á√ÉO")
        print("=" * 50)
        
        test_messages = [
            "Quais servi√ßos voc√™s oferecem?",
            "Quanto custa uma limpeza de pele?", 
            "Qual o endere√ßo de voc√™s?",
            "Qual o hor√°rio de funcionamento?",
            "Quero agendar um hidrofacial"
        ]
        
        print("üì± MENSAGENS DE TESTE:")
        for i, msg in enumerate(test_messages, 1):
            print(f"   {i}. {msg}")
        
        # Salvar teste
        test_data = {
            "timestamp": datetime.now().isoformat(),
            "test_messages": test_messages,
            "expected_behavior": "Bot deve consultar banco e usar dados reais",
            "critical_points": [
                "Nome da empresa: Studio Beleza & Bem-Estar",
                "Endere√ßo real: Rua das Flores, 123 - Centro",
                "Pre√ßos reais: R$ 45,00 a R$ 300,00",
                "Servi√ßos espec√≠ficos: 10 servi√ßos cadastrados"
            ]
        }
        
        filename = f"integration_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(test_data, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"üìÑ Teste salvo: {filename}")

    async def run_integration_fix(self):
        """Executa corre√ß√£o completa da integra√ß√£o"""
        print("üîß INICIANDO CORRE√á√ÉO DA INTEGRA√á√ÉO LLM")
        print("=" * 60)
        
        if not await self.connect():
            return False
        
        # 1. Extrair dados reais
        business_data = await self.get_business_data()
        
        # 2. Verificar configura√ß√£o
        bot_config = await self.check_bot_configuration()
        
        # 3. Testar queries
        await self.test_database_queries()
        
        # 4. Gerar template de prompt
        await self.generate_llm_prompt_template(business_data)
        
        # 5. Criar teste de integra√ß√£o
        await self.create_integration_test()
        
        # 6. Relat√≥rio final
        print("\nüìä RELAT√ìRIO FINAL DE CORRE√á√ÉO")
        print("=" * 50)
        print("‚úÖ Dados da empresa extra√≠dos corretamente")
        print("‚úÖ Servi√ßos reais identificados")
        print("‚úÖ Queries de teste executadas")
        print("‚úÖ Template de prompt gerado")
        print("‚úÖ Teste de integra√ß√£o criado")
        
        print("\nüéØ PR√ìXIMOS PASSOS:")
        print("   1. Aplicar template de prompt no sistema LLM")
        print("   2. Configurar bot para consultar banco sempre")
        print("   3. Testar com mensagens reais")
        print("   4. Verificar se respostas usam dados corretos")
        
        return True

    async def close(self):
        """Fecha conex√£o"""
        try:
            if hasattr(self, 'db'):
                await self.db.close()
                print("‚úÖ Conex√£o fechada")
        except Exception as e:
            print(f"‚ùå Erro ao fechar: {e}")


async def main():
    """Fun√ß√£o principal"""
    fixer = LLMDatabaseIntegrationFixer()
    
    try:
        await fixer.run_integration_fix()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Corre√ß√£o interrompida")
    except Exception as e:
        print(f"\nüí• Erro: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await fixer.close()


if __name__ == "__main__":
    print("üîß CORRE√á√ÉO DA INTEGRA√á√ÉO LLM - Database")
    print("=" * 50)
    print("üéØ O problema identificado:")
    print("   ‚ùå Bot n√£o consulta dados reais do banco")
    print("   ‚ùå Usa conhecimento gen√©rico da LLM")
    print("   ‚ùå Ignora informa√ß√µes espec√≠ficas cadastradas")
    print("\n‚úÖ Solu√ß√£o:")
    print("   üîß For√ßar consulta ao banco sempre")
    print("   üìã Usar dados reais da empresa")
    print("   üéØ Template de prompt correto")
    print("=" * 50)
    
    input("‚ñ∂Ô∏è Pressione ENTER para corrigir integra√ß√£o...")
    
    asyncio.run(main())