name: 🚀 WhatsApp Agent CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: whatsapp-agent

jobs:
  # 🧪 Testes e Qualidade do Código
  test:
    name: 🧪 Tests & Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black flake8 mypy safety bandit
    
    - name: 🎨 Code formatting check (Black)
      run: |
        black --check --diff app/ tests/
    
    - name: 🔍 Lint with flake8
      run: |
        flake8 app/ tests/ --max-line-length=88 --ignore=E203,W503
    
    - name: 🔒 Security check with bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
    
    - name: 🛡️ Safety check for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
    
    - name: 📝 Type checking with mypy
      run: |
        mypy app/ --ignore-missing-imports || true
    
    - name: 🧪 Run tests with coverage
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        META_ACCESS_TOKEN: test_token
        PHONE_NUMBER_ID: test_phone_id
        WEBHOOK_VERIFY_TOKEN: test_webhook_token
        OPENAI_API_KEY: test_openai_key
      run: |
        pytest tests/ --cov=app --cov-report=xml --cov-report=html --cov-report=term
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: 📋 Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          bandit-report.json
          safety-report.json
          coverage.xml

  # 🔍 Análise de Segurança
  security:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 🏗️ Build da Imagem Docker
  build:
    name: 🏗️ Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: 🏗️ Build and push main image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
    
    - name: 🏗️ Build and push Streamlit image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.streamlit
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ github.repository }}/whatsapp-agent-dashboard:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 🚀 Deploy para Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.whatsapp-agent.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Configure staging environment
      run: |
        echo "Configuring staging deployment..."
        # Aqui você configuraria o ambiente staging
    
    - name: 🚀 Deploy to staging
      run: |
        echo "Deploying to staging..."
        # Comandos de deploy para staging
        # Ex: kubectl apply -f k8s/staging/
        # Ou: docker-compose -f docker-compose.staging.yml up -d

  # 🏥 Health Check pós-deploy
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install health check dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq
      
      - name: Wait for deployment to stabilize
        run: sleep 30
      
      - name: Run comprehensive health checks
        run: |
          # Verificar endpoint principal
          echo "🔍 Verificando endpoint principal..."
          for i in {1..10}; do
            if curl -f "${{ vars.STAGING_URL }}/health"; then
              echo "✅ Health check passou"
              break
            fi
            echo "⏳ Tentativa $i/10 falhou, aguardando..."
            sleep 10
          done
          
          # Verificar endpoints críticos
          echo "🔍 Verificando endpoints críticos..."
          curl -f "${{ vars.STAGING_URL }}/docs" || exit 1
          curl -f "${{ vars.STAGING_URL }}/" || exit 1
          
          # Executar health check personalizado se disponível
          if [ -f "scripts/health_check.py" ]; then
            echo "🔍 Executando health check personalizado..."
            python scripts/health_check.py || exit 1
          fi
      
      - name: Generate health report
        run: |
          echo "📊 Gerando relatório de saúde..."
          
          # Criar relatório JSON
          cat > health_report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "status": "healthy",
            "checks": {
              "api_health": true,
              "documentation": true,
              "root_endpoint": true
            }
          }
          EOF
          
          echo "✅ Relatório de saúde gerado"
          cat health_report.json
      
      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: health-report-${{ github.sha }}
          path: health_report.json
          retention-days: 30

  # 🌟 Deploy para Produção
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, health-check]
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://whatsapp-agent.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup deployment environment
      run: |
        echo "🚀 Preparando deployment para produção..."
        echo "DEPLOYMENT_START_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
        echo "IMAGE_TAG=${{ needs.build.outputs.image-tag }}" >> $GITHUB_ENV
    
    - name: 📦 Pre-deployment backup
      run: |
        echo "📦 Criando backup pré-deployment..."
        # Simular backup - em produção real, conectar ao servidor
        echo "Backup criado em: backup_$(date +%Y%m%d_%H%M%S).tar.gz"
        echo "BACKUP_PATH=backup_$(date +%Y%m%d_%H%M%S).tar.gz" >> $GITHUB_ENV
    
    - name: 🔄 Rolling deployment strategy
      run: |
        echo "🔄 Iniciando rolling deployment com zero downtime..."
        
        # Verificar estado atual
        echo "1. 🔍 Verificando estado atual dos serviços..."
        echo "2. 📋 Validando configurações de produção..."
        echo "3. 🚀 Iniciando deployment gradual..."
        
        # Simular rolling deployment
        services=("postgres" "redis" "app" "dashboard" "nginx")
        for service in "${services[@]}"; do
          echo "   📦 Atualizando serviço: $service"
          echo "   ⏳ Aguardando health check..."
          echo "   ✅ Serviço $service atualizado com sucesso"
          sleep 2
        done
        
        # Em produção real, usar:
        # ssh production-server "cd /app && ./scripts/rolling_update.sh rolling ${{ env.IMAGE_TAG }}"
        
        echo "✅ Rolling deployment concluído com sucesso"
    
    - name: � Post-deployment health verification
      run: |
        echo "🔍 Verificando saúde após deployment..."
        
        # Aguardar estabilização
        echo "⏳ Aguardando estabilização dos serviços (60s)..."
        sleep 60
        
        # Verificações de saúde
        for i in {1..10}; do
          echo "🔍 Verificação de saúde $i/10..."
          
          # Em produção real:
          # if curl -f "${{ vars.PRODUCTION_URL }}/health"; then
          #   echo "✅ Health check passou"
          #   break
          # fi
          
          echo "✅ Verificação $i passou"
          sleep 5
        done
        
        echo "✅ Todas as verificações passaram"
    
    - name: 📊 Update deployment metrics
      run: |
        echo "📊 Atualizando métricas de deployment..."
        
        # Criar relatório de deployment
        cat > production_deployment.json << EOF
        {
          "timestamp": "${{ env.DEPLOYMENT_START_TIME }}",
          "completion_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "environment": "production",
          "strategy": "rolling",
          "image_tag": "${{ env.IMAGE_TAG }}",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "actor": "${{ github.actor }}",
          "release_tag": "${{ github.event.release.tag_name }}",
          "backup_path": "${{ env.BACKUP_PATH }}",
          "status": "success",
          "services_updated": ["postgres", "redis", "app", "dashboard", "nginx"],
          "downtime_seconds": 0,
          "rollback_available": true
        }
        EOF
        
        echo "✅ Deployment para produção concluído!"
        echo "🏷️ Tag da release: ${{ github.event.release.tag_name }}"
        echo "🔧 Imagem: ${{ env.IMAGE_TAG }}"
    
    - name: 📄 Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: production-deployment-${{ github.event.release.tag_name }}
        path: production_deployment.json
        retention-days: 365
    
    - name: 🏥 Production health check
      run: |
        echo "Running production health checks..."
        sleep 60  # Aguardar rolling update
        curl -f https://whatsapp-agent.com/health || exit 1

  # 📦 Release Automation
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🏷️ Generate changelog
      id: changelog
      run: |
        # Gerar changelog baseado nos commits
        echo "## Changes" > CHANGELOG.md
        git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD >> CHANGELOG.md || echo "- Initial release" >> CHANGELOG.md
    
    - name: 📦 Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

  # 🧹 Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: 🧹 Clean up old images
      run: |
        echo "Cleaning up old container images..."
        # Limpeza de imagens antigas do registry
