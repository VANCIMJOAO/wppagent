"""
üß™ Testes End-to-End - Fluxos Cr√≠ticos Completos
Testa jornadas completas do usu√°rio do in√≠cio ao fim
"""
import pytest
import asyncio
import time
from datetime import datetime, timedelta


class TestCriticalUserJourneys:
    """üéØ Testes de jornadas cr√≠ticas do usu√°rio"""
    
    @pytest.mark.e2e
    @pytest.mark.critical
    async def test_complete_appointment_booking_flow(self, test_client, conversation_simulator):
        """Testa fluxo completo de agendamento de consulta"""
        
        phone = "5511999999001"
        user_name = "Jo√£o da Silva"
        
        simulator = conversation_simulator(test_client)
        
        # === ETAPA 1: Sauda√ß√£o inicial ===
        response1 = await simulator.send_message(phone, "Ol√°, boa tarde!")
        assert "sucesso" in str(response1).lower() or response1.get("status") == "success"
        
        # === ETAPA 2: Manifestar interesse em agendamento ===
        response2 = await simulator.send_message(phone, "Gostaria de agendar um corte de cabelo")
        assert "sucesso" in str(response2).lower() or response2.get("status") == "success"
        
        # === ETAPA 3: Consultar disponibilidade ===
        response3 = await simulator.send_message(phone, "Que hor√°rios voc√™s t√™m dispon√≠vel para amanh√£?")
        assert "sucesso" in str(response3).lower() or response3.get("status") == "success"
        
        # === ETAPA 4: Escolher hor√°rio ===
        response4 = await simulator.send_message(phone, "Quero agendar para amanh√£ √†s 14h")
        assert "sucesso" in str(response4).lower() or response4.get("status") == "success"
        
        # === ETAPA 5: Confirmar dados ===
        response5 = await simulator.send_message(phone, f"Meu nome √© {user_name}")
        assert "sucesso" in str(response5).lower() or response5.get("status") == "success"
        
        # === ETAPA 6: Confirmar agendamento ===
        response6 = await simulator.send_message(phone, "Sim, confirmo o agendamento")
        assert "sucesso" in str(response6).lower() or response6.get("status") == "success"
        
        # === VERIFICA√á√ÉO FINAL ===
        history = simulator.get_conversation_history(phone)
        assert len(history) == 6, f"Esperado 6 mensagens, recebido {len(history)}"
        
        # Verificar se todas as etapas foram processadas sem erro
        for i, interaction in enumerate(history, 1):
            assert interaction["response"] is not None, f"Etapa {i} falhou: sem resposta"
        
        print(f"‚úÖ JORNADA COMPLETA DE AGENDAMENTO CONCLU√çDA")
        print(f"üì± Cliente: {phone}")
        print(f"üë§ Nome: {user_name}")
        print(f"üìÖ Etapas completadas: {len(history)}")
    
    @pytest.mark.e2e
    @pytest.mark.critical
    async def test_appointment_cancellation_flow(self, test_client, conversation_simulator):
        """Testa fluxo completo de cancelamento de agendamento"""
        
        phone = "5511999999002"
        simulator = conversation_simulator(test_client)
        
        # === PR√â-REQUISITO: Criar um agendamento primeiro ===
        await simulator.send_message(phone, "Quero agendar um corte para amanh√£ √†s 15h")
        await simulator.send_message(phone, "Meu nome √© Maria Silva")
        await simulator.send_message(phone, "Confirmo o agendamento")
        
        # Aguardar um pouco para processar
        await asyncio.sleep(0.5)
        
        # === IN√çCIO DO CANCELAMENTO ===
        response1 = await simulator.send_message(phone, "Preciso cancelar meu agendamento")
        assert "sucesso" in str(response1).lower() or response1.get("status") == "success"
        
        # === CONFIRMA√á√ÉO DO CANCELAMENTO ===
        response2 = await simulator.send_message(phone, "Sim, quero cancelar")
        assert "sucesso" in str(response2).lower() or response2.get("status") == "success"
        
        # === MOTIVO DO CANCELAMENTO (OPCIONAL) ===
        response3 = await simulator.send_message(phone, "Surgiu um compromisso")
        assert "sucesso" in str(response3).lower() or response3.get("status") == "success"
        
        # === CONFIRMA√á√ÉO FINAL ===
        response4 = await simulator.send_message(phone, "Obrigada")
        assert "sucesso" in str(response4).lower() or response4.get("status") == "success"
        
        # Verificar fluxo completo
        history = simulator.get_conversation_history(phone)
        cancellation_history = history[-4:]  # √öltimas 4 mensagens (cancelamento)
        
        assert len(cancellation_history) == 4
        
        print(f"‚úÖ JORNADA COMPLETA DE CANCELAMENTO CONCLU√çDA")
        print(f"üì± Cliente: {phone}")
        print(f"üö´ Etapas de cancelamento: {len(cancellation_history)}")
    
    @pytest.mark.e2e
    @pytest.mark.critical
    async def test_price_inquiry_and_booking_flow(self, test_client, conversation_simulator):
        """Testa fluxo de consulta de pre√ßos seguido de agendamento"""
        
        phone = "5511999999003"
        simulator = conversation_simulator(test_client)
        
        # === CONSULTA DE PRE√áOS ===
        response1 = await simulator.send_message(phone, "Quanto custa um corte masculino?")
        assert "sucesso" in str(response1).lower() or response1.get("status") == "success"
        
        response2 = await simulator.send_message(phone, "E barba? Fazem tamb√©m?")
        assert "sucesso" in str(response2).lower() or response2.get("status") == "success"
        
        response3 = await simulator.send_message(phone, "Qual o pre√ßo do pacote corte + barba?")
        assert "sucesso" in str(response3).lower() or response3.get("status") == "success"
        
        # === DECIS√ÉO DE AGENDAR ===
        response4 = await simulator.send_message(phone, "Perfeito! Quero agendar o pacote completo")
        assert "sucesso" in str(response4).lower() or response4.get("status") == "success"
        
        # === AGENDAMENTO ===
        response5 = await simulator.send_message(phone, "Para sexta-feira √†s 10h")
        assert "sucesso" in str(response5).lower() or response5.get("status") == "success"
        
        response6 = await simulator.send_message(phone, "Pedro Santos")
        assert "sucesso" in str(response6).lower() or response6.get("status") == "success"
        
        response7 = await simulator.send_message(phone, "Confirmo")
        assert "sucesso" in str(response7).lower() or response7.get("status") == "success"
        
        # Verificar jornada completa
        history = simulator.get_conversation_history(phone)
        assert len(history) == 7
        
        print(f"‚úÖ JORNADA PRE√áOS ‚Üí AGENDAMENTO CONCLU√çDA")
        print(f"üì± Cliente: {phone}")
        print(f"üí∞ Consultas de pre√ßo + agendamento: {len(history)} etapas")
    
    @pytest.mark.e2e
    @pytest.mark.critical
    async def test_complex_rescheduling_flow(self, test_client, conversation_simulator):
        """Testa fluxo complexo de reagendamento"""
        
        phone = "5511999999004"
        simulator = conversation_simulator(test_client)
        
        # === PR√â-REQUISITO: Agendamento existente ===
        await simulator.send_message(phone, "Quero agendar para segunda √†s 14h")
        await simulator.send_message(phone, "Ana Costa")
        await simulator.send_message(phone, "Confirmo")
        
        await asyncio.sleep(0.5)
        
        # === IN√çCIO DO REAGENDAMENTO ===
        response1 = await simulator.send_message(phone, "Preciso remarcar meu hor√°rio")
        assert "sucesso" in str(response1).lower() or response1.get("status") == "success"
        
        # === NOVA DATA/HORA ===
        response2 = await simulator.send_message(phone, "Pode ser na ter√ßa-feira?")
        assert "sucesso" in str(response2).lower() or response2.get("status") == "success"
        
        response3 = await simulator.send_message(phone, "Que horas voc√™s t√™m na ter√ßa?")
        assert "sucesso" in str(response3).lower() or response3.get("status") == "success"
        
        response4 = await simulator.send_message(phone, "√Äs 16h est√° bom")
        assert "sucesso" in str(response4).lower() or response4.get("status") == "success"
        
        # === CONFIRMA√á√ÉO ===
        response5 = await simulator.send_message(phone, "Sim, confirmo a remarca√ß√£o")
        assert "sucesso" in str(response5).lower() or response5.get("status") == "success"
        
        # Verificar fluxo
        history = simulator.get_conversation_history(phone)
        rescheduling_history = history[-5:]  # √öltimas 5 mensagens
        
        assert len(rescheduling_history) == 5
        
        print(f"‚úÖ JORNADA COMPLEXA DE REAGENDAMENTO CONCLU√çDA")
        print(f"üì± Cliente: {phone}")
        print(f"üîÑ Etapas de reagendamento: {len(rescheduling_history)}")


class TestErrorRecoveryFlows:
    """üö® Testes de recupera√ß√£o de erros em fluxos cr√≠ticos"""
    
    @pytest.mark.e2e
    @pytest.mark.critical
    async def test_interrupted_booking_recovery(self, test_client, conversation_simulator):
        """Testa recupera√ß√£o quando agendamento √© interrompido"""
        
        phone = "5511999999005"
        simulator = conversation_simulator(test_client)
        
        # === IN√çCIO NORMAL ===
        await simulator.send_message(phone, "Quero agendar um hor√°rio")
        await simulator.send_message(phone, "Para amanh√£ de manh√£")
        
        # === INTERRUP√á√ÉO - Mudan√ßa de assunto ===
        await simulator.send_message(phone, "Voc√™s ficam onde mesmo?")
        await simulator.send_message(phone, "Tem estacionamento?")
        
        # === RETORNO AO AGENDAMENTO ===
        response1 = await simulator.send_message(phone, "Voltando ao agendamento, √†s 9h est√° bom?")
        assert "sucesso" in str(response1).lower() or response1.get("status") == "success"
        
        response2 = await simulator.send_message(phone, "Carlos Mendes")
        assert "sucesso" in str(response2).lower() or response2.get("status") == "success"
        
        response3 = await simulator.send_message(phone, "Pode confirmar")
        assert "sucesso" in str(response3).lower() or response3.get("status") == "success"
        
        history = simulator.get_conversation_history(phone)
        assert len(history) >= 7
        
        print(f"‚úÖ RECUPERA√á√ÉO DE AGENDAMENTO INTERROMPIDO")
        print(f"üì± Cliente: {phone}")
        print(f"üîÑ Mensagens totais: {len(history)}")
    
    @pytest.mark.e2e
    @pytest.mark.critical
    async def test_invalid_input_handling(self, test_client, conversation_simulator):
        """Testa tratamento de entradas inv√°lidas em fluxos cr√≠ticos"""
        
        phone = "5511999999006"
        simulator = conversation_simulator(test_client)
        
        # === ENTRADAS INV√ÅLIDAS ===
        response1 = await simulator.send_message(phone, "asdfghjkl")  # Texto sem sentido
        assert "sucesso" in str(response1).lower() or response1.get("status") == "success"
        
        response2 = await simulator.send_message(phone, "")  # Mensagem vazia
        assert "sucesso" in str(response2).lower() or response2.get("status") == "success"
        
        response3 = await simulator.send_message(phone, "12345")  # Apenas n√∫meros
        assert "sucesso" in str(response3).lower() or response3.get("status") == "success"
        
        # === ENTRADA V√ÅLIDA AP√ìS INV√ÅLIDAS ===
        response4 = await simulator.send_message(phone, "Ol√°, gostaria de agendar um hor√°rio")
        assert "sucesso" in str(response4).lower() or response4.get("status") == "success"
        
        history = simulator.get_conversation_history(phone)
        assert len(history) == 4
        
        # Sistema deve continuar funcionando normalmente
        response5 = await simulator.send_message(phone, "Para amanh√£ √†s 15h")
        assert "sucesso" in str(response5).lower() or response5.get("status") == "success"
        
        print(f"‚úÖ TRATAMENTO DE ENTRADAS INV√ÅLIDAS")
        print(f"üì± Cliente: {phone}")
        print(f"‚ö†Ô∏è Entradas inv√°lidas processadas sem erro")


class TestMultiUserConcurrentFlows:
    """üë• Testes de fluxos concorrentes com m√∫ltiplos usu√°rios"""
    
    @pytest.mark.e2e
    @pytest.mark.critical
    @pytest.mark.slow
    async def test_concurrent_booking_same_time_slot(self, test_client, conversation_simulator):
        """Testa tentativa de agendamento concorrente para o mesmo hor√°rio"""
        
        phones = ["5511999999007", "5511999999008", "5511999999009"]
        simulators = [conversation_simulator(test_client) for _ in phones]
        
        async def attempt_booking(simulator, phone, user_name):
            """Tenta fazer agendamento"""
            try:
                await simulator.send_message(phone, "Quero agendar para amanh√£ √†s 14h")
                await simulator.send_message(phone, user_name)
                await simulator.send_message(phone, "Confirmo")
                return {"phone": phone, "success": True}
            except Exception as e:
                return {"phone": phone, "success": False, "error": str(e)}
        
        # Executar agendamentos simult√¢neos para o mesmo hor√°rio
        tasks = [
            attempt_booking(simulators[0], phones[0], "Cliente A"),
            attempt_booking(simulators[1], phones[1], "Cliente B"),
            attempt_booking(simulators[2], phones[2], "Cliente C")
        ]
        
        results = await asyncio.gather(*tasks)
        
        # Verificar resultados
        successful_bookings = [r for r in results if r["success"]]
        
        # Deve haver pelo menos um agendamento bem-sucedido
        assert len(successful_bookings) >= 1, "Nenhum agendamento foi bem-sucedido"
        
        # N√£o deve haver m√∫ltiplos agendamentos para o mesmo hor√°rio
        # (isso seria verificado em n√≠vel de banco de dados/regra de neg√≥cio)
        
        print(f"‚úÖ TESTE DE CONCORR√äNCIA EM AGENDAMENTOS")
        print(f"üë• Usu√°rios simult√¢neos: {len(phones)}")
        print(f"‚úÖ Agendamentos bem-sucedidos: {len(successful_bookings)}")
    
    @pytest.mark.e2e
    @pytest.mark.critical
    async def test_mixed_conversation_flows(self, test_client, conversation_simulator):
        """Testa diferentes tipos de conversas acontecendo simultaneamente"""
        
        scenarios = [
            {"phone": "5511999999010", "type": "booking", "messages": [
                "Quero agendar um corte",
                "Para hoje √†s 16h",
                "Jo√£o Silva",
                "Confirmo"
            ]},
            {"phone": "5511999999011", "type": "inquiry", "messages": [
                "Quanto custa uma barba?",
                "E sobrancelha?",
                "Obrigado pelas informa√ß√µes"
            ]},
            {"phone": "5511999999012", "type": "cancellation", "messages": [
                "Preciso cancelar meu agendamento",
                "Sim, quero cancelar",
                "Muito obrigado"
            ]},
            {"phone": "5511999999013", "type": "support", "messages": [
                "Onde voc√™s ficam?",
                "Que horas abrem?",
                "Trabalham no s√°bado?"
            ]}
        ]
        
        async def execute_scenario(scenario):
            """Executa um cen√°rio de conversa"""
            simulator = conversation_simulator(test_client)
            phone = scenario["phone"]
            
            results = []
            for message in scenario["messages"]:
                try:
                    response = await simulator.send_message(phone, message)
                    results.append({
                        "message": message,
                        "success": "sucesso" in str(response).lower() or response.get("status") == "success"
                    })
                    await asyncio.sleep(0.1)  # Pequeno delay entre mensagens
                except Exception as e:
                    results.append({
                        "message": message,
                        "success": False,
                        "error": str(e)
                    })
            
            return {
                "scenario_type": scenario["type"],
                "phone": phone,
                "results": results,
                "success_rate": sum(1 for r in results if r["success"]) / len(results)
            }
        
        # Executar todos os cen√°rios concorrentemente
        tasks = [execute_scenario(scenario) for scenario in scenarios]
        scenario_results = await asyncio.gather(*tasks)
        
        # Verificar resultados
        for result in scenario_results:
            assert result["success_rate"] >= 0.8, f"Cen√°rio {result['scenario_type']} teve taxa de sucesso baixa: {result['success_rate']:.2%}"
        
        print(f"‚úÖ TESTE DE FLUXOS MISTOS CONCORRENTES")
        for result in scenario_results:
            print(f"üì± {result['scenario_type']}: {result['success_rate']:.2%} sucesso")


class TestSystemRecoveryFlows:
    """üîÑ Testes de recupera√ß√£o do sistema ap√≥s falhas"""
    
    @pytest.mark.e2e
    @pytest.mark.critical
    async def test_conversation_state_persistence(self, test_client, conversation_simulator):
        """Testa persist√™ncia do estado da conversa ap√≥s "rein√≠cio" do sistema"""
        
        phone = "5511999999014"
        simulator = conversation_simulator(test_client)
        
        # === PRIMEIRA PARTE DA CONVERSA ===
        await simulator.send_message(phone, "Ol√°, quero agendar")
        await simulator.send_message(phone, "Para amanh√£ de tarde")
        
        # Simular "interrup√ß√£o" - limpar hist√≥rico do simulador mas manter estado do sistema
        # (em produ√ß√£o seria um rein√≠cio do sistema)
        simulator.clear_history()
        
        # === CONTINUAR CONVERSA AP√ìS "REIN√çCIO" ===
        response1 = await simulator.send_message(phone, "√Äs 15h est√° dispon√≠vel?")
        assert "sucesso" in str(response1).lower() or response1.get("status") == "success"
        
        response2 = await simulator.send_message(phone, "Roberto Costa")
        assert "sucesso" in str(response2).lower() or response2.get("status") == "success"
        
        response3 = await simulator.send_message(phone, "Confirmo o agendamento")
        assert "sucesso" in str(response3).lower() or response3.get("status") == "success"
        
        # Verificar se conversa continuou normalmente
        post_restart_history = simulator.get_conversation_history(phone)
        assert len(post_restart_history) == 3
        
        print(f"‚úÖ TESTE DE PERSIST√äNCIA DE ESTADO")
        print(f"üì± Cliente: {phone}")
        print(f"üîÑ Conversa continuou ap√≥s 'rein√≠cio'")


if __name__ == "__main__":
    pytest.main([__file__, "-v", "--tb=short", "-m", "e2e"])
