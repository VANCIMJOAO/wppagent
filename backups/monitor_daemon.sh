#!/bin/bash
# monitor_daemon.sh - Script para executar o monitor como daemon

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PYTHON_PATH="$SCRIPT_DIR/venv/bin/python"
MONITOR_SCRIPT="$SCRIPT_DIR/monitor.py"
PID_FILE="$SCRIPT_DIR/logs/monitor.pid"
LOG_FILE="$SCRIPT_DIR/logs/monitor_daemon.log"

# Criar diret√≥rio de logs se n√£o existir
mkdir -p "$SCRIPT_DIR/logs"

start_monitor() {
    if [ -f "$PID_FILE" ] && kill -0 "$(cat "$PID_FILE")" 2>/dev/null; then
        echo "‚ö†Ô∏è  Monitor j√° est√° rodando (PID: $(cat "$PID_FILE"))"
        return 1
    fi
    
    echo "üöÄ Iniciando monitor do sistema..."
    
    # Iniciar monitor em background
    nohup "$PYTHON_PATH" "$MONITOR_SCRIPT" --continuous --interval 300 --save-report > "$LOG_FILE" 2>&1 &
    
    # Salvar PID
    echo $! > "$PID_FILE"
    
    echo "‚úÖ Monitor iniciado (PID: $!)"
    echo "üìÅ Logs em: $LOG_FILE"
}

stop_monitor() {
    if [ ! -f "$PID_FILE" ]; then
        echo "‚ö†Ô∏è  Monitor n√£o est√° rodando"
        return 1
    fi
    
    PID=$(cat "$PID_FILE")
    
    if kill -0 "$PID" 2>/dev/null; then
        echo "üõë Parando monitor (PID: $PID)..."
        kill "$PID"
        
        # Aguardar at√© 10 segundos para parar graciosamente
        for i in {1..10}; do
            if ! kill -0 "$PID" 2>/dev/null; then
                break
            fi
            sleep 1
        done
        
        # For√ßar parada se necess√°rio
        if kill -0 "$PID" 2>/dev/null; then
            echo "‚ö†Ô∏è  For√ßando parada..."
            kill -9 "$PID"
        fi
        
        rm -f "$PID_FILE"
        echo "‚úÖ Monitor parado"
    else
        echo "‚ö†Ô∏è  Processo n√£o encontrado, removendo PID file"
        rm -f "$PID_FILE"
    fi
}

status_monitor() {
    if [ -f "$PID_FILE" ] && kill -0 "$(cat "$PID_FILE")" 2>/dev/null; then
        PID=$(cat "$PID_FILE")
        echo "‚úÖ Monitor rodando (PID: $PID)"
        
        # Mostrar informa√ß√µes do processo
        if command -v ps >/dev/null 2>&1; then
            echo "üìä Processo:"
            ps -p "$PID" -o pid,ppid,user,start,time,command 2>/dev/null || echo "   Informa√ß√µes n√£o dispon√≠veis"
        fi
        
        # Mostrar √∫ltimas linhas do log
        if [ -f "$LOG_FILE" ]; then
            echo "üìù √öltimas 5 linhas do log:"
            tail -n 5 "$LOG_FILE"
        fi
        
        return 0
    else
        echo "‚ùå Monitor n√£o est√° rodando"
        if [ -f "$PID_FILE" ]; then
            echo "   Removendo PID file √≥rf√£o..."
            rm -f "$PID_FILE"
        fi
        return 1
    fi
}

restart_monitor() {
    echo "üîÑ Reiniciando monitor..."
    stop_monitor
    sleep 2
    start_monitor
}

show_logs() {
    if [ -f "$LOG_FILE" ]; then
        echo "üìù Logs do monitor:"
        echo "=================="
        tail -n 50 "$LOG_FILE"
    else
        echo "‚ùå Arquivo de log n√£o encontrado: $LOG_FILE"
    fi
}

check_health() {
    echo "üîç Executando verifica√ß√£o √∫nica de sa√∫de..."
    "$PYTHON_PATH" "$MONITOR_SCRIPT" --check-all --save-report
}

case "$1" in
    start)
        start_monitor
        ;;
    stop)
        stop_monitor
        ;;
    restart)
        restart_monitor
        ;;
    status)
        status_monitor
        ;;
    logs)
        show_logs
        ;;
    check)
        check_health
        ;;
    *)
        echo "üîß Monitor do Sistema WhatsApp Agent"
        echo "=================================="
        echo "Uso: $0 {start|stop|restart|status|logs|check}"
        echo ""
        echo "Comandos:"
        echo "  start   - Iniciar monitor em background"
        echo "  stop    - Parar monitor"
        echo "  restart - Reiniciar monitor"
        echo "  status  - Ver status do monitor"
        echo "  logs    - Ver logs recentes"
        echo "  check   - Executar verifica√ß√£o √∫nica"
        echo ""
        echo "Arquivos:"
        echo "  PID:  $PID_FILE"
        echo "  Log:  $LOG_FILE"
        exit 1
        ;;
esac

exit 0
