#!/usr/bin/env python3
"""
üß™ SCRIPT COMPLETO DE TESTE - WhatsApp Agent
===========================================
Teste abrangente com todos os cen√°rios e an√°lise detalhada
"""

import asyncio
import aiohttp
import asyncpg
import json
import time
import random
import logging
import hmac
import hashlib
from datetime import datetime, timedelta, timezone
from typing import Dict, List, Any

# Configura√ß√µes
RAILWAY_URL = "https://wppagent-production.up.railway.app"
TEST_PHONE = "5516991022255"

# Token atualizado - mesmo usado no .env
WHATSAPP_ACCESS_TOKEN = "EAAI4WnfpZAe0BPDCcfwPDFaS75i5dMCvEr9TC0etsYZA4ZCtu5gbUOy24LmyWL3udrJZBw6NlAYnMgpZAZAofq75HBk2ZC4oZCe8qVxN52CsbzHw22totMF9bn71zaMvSBuITJM5340yYf27g8ZCPKXW5xS9gRNCcYGEab0fRoCciHuZAazF1jMZBrJ4jNAw3RHC0ZAKrKVkfUzvH1rcxn0BZBEZAIOQs26BJ5qkmR18bSkPu042IAcXgx4IFzsHEYNSQZD"
WEBHOOK_URL = f"{RAILWAY_URL}/webhook"
DATABASE_URL = 'postgresql://postgres:UGARTPCwAADBBeBLctoRnQXLsoUvLJxz@caboose.proxy.rlwy.net:13910/railway'

# Setup logging
log_filename = f"whatsapp_test_complete_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class WhatsAppTester:
    def __init__(self, send_real_whatsapp=False):
        """
        Inicializa o testador
        
        Args:
            send_real_whatsapp: Se True, tamb√©m envia mensagens reais via WhatsApp API
        """
        self.session = None
        self.db_conn = None
        self.test_results = []
        self.llm_responses = []
        self.start_time = datetime.now()
        self.debug_info = {}
        self.send_real_whatsapp = send_real_whatsapp
        
    async def __aenter__(self):
        self.session = aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30))
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
        if self.db_conn:
            await self.db_conn.close()

    async def debug_system_check(self):
        """Verifica√ß√µes de debug antes dos testes"""
        logger.info("üîç INICIANDO VERIFICA√á√ïES DE DEBUG")
        logger.info("=" * 50)
        
        # Check 1: Health do sistema
        try:
            async with self.session.get(f"{RAILWAY_URL}/health") as response:
                health_data = await response.json()
                self.debug_info['health_check'] = {
                    "status": response.status,
                    "data": health_data,
                    "timestamp": datetime.now().isoformat()
                }
                logger.info(f"‚úÖ Health Check: {response.status} - {health_data.get('status', 'unknown')}")
        except Exception as e:
            logger.error(f"‚ùå Health Check falhou: {e}")
            self.debug_info['health_check'] = {"error": str(e)}
        
        # Check 2: Health detalhado
        try:
            async with self.session.get(f"{RAILWAY_URL}/health/detailed") as response:
                detailed_health = await response.json()
                self.debug_info['detailed_health'] = {
                    "status": response.status,
                    "data": detailed_health,
                    "timestamp": datetime.now().isoformat()
                }
                logger.info(f"‚úÖ Health Detalhado: {response.status}")
                if detailed_health.get('checks'):
                    for check_name, check_data in detailed_health['checks'].items():
                        logger.debug(f"   {check_name}: {check_data.get('status', 'unknown')}")
        except Exception as e:
            logger.error(f"‚ùå Health Detalhado falhou: {e}")
            self.debug_info['detailed_health'] = {"error": str(e)}
        
        # Check 3: Webhook status
        try:
            async with self.session.get(f"{RAILWAY_URL}/webhook/status") as response:
                webhook_status = await response.json()
                self.debug_info['webhook_status'] = {
                    "status": response.status,
                    "data": webhook_status,
                    "timestamp": datetime.now().isoformat()
                }
                logger.info(f"‚úÖ Webhook Status: {response.status}")
                logger.debug(f"   Meta API: {webhook_status.get('meta_api', {}).get('status', 'unknown')}")
        except Exception as e:
            logger.error(f"‚ùå Webhook Status falhou: {e}")
            self.debug_info['webhook_status'] = {"error": str(e)}
        
        # Check 4: Conectividade do banco
        try:
            self.db_conn = await asyncpg.connect(DATABASE_URL)
            await self.db_conn.fetchval("SELECT 1")
            self.debug_info['database_check'] = {
                "status": "connected",
                "timestamp": datetime.now().isoformat()
            }
            logger.info("‚úÖ Banco de dados conectado")
        except Exception as e:
            logger.error(f"‚ùå Conex√£o com banco falhou: {e}")
            self.debug_info['database_check'] = {"error": str(e)}
        
        # Check 5: Verificar se usu√°rio existe
        if self.db_conn:
            try:
                user = await self.db_conn.fetchrow(
                    "SELECT id, wa_id, nome, created_at FROM users WHERE wa_id = $1 OR telefone = $1", 
                    TEST_PHONE
                )
                if user:
                    self.debug_info['user_check'] = {
                        "exists": True,
                        "user_id": user['id'],
                        "name": user['nome'],
                        "created": user['created_at'].isoformat()
                    }
                    logger.info(f"‚úÖ Usu√°rio encontrado: {user['nome']} (ID: {user['id']})")
                else:
                    self.debug_info['user_check'] = {"exists": False}
                    logger.info("‚ÑπÔ∏è Usu√°rio n√£o existe - ser√° criado durante o teste")
            except Exception as e:
                logger.error(f"‚ùå Verifica√ß√£o de usu√°rio falhou: {e}")
                self.debug_info['user_check'] = {"error": str(e)}
        
        # Check 6: Rate limit status
        try:
            async with self.session.get(f"{RAILWAY_URL}/rate-limit/stats") as response:
                rate_limit_stats = await response.json()
                self.debug_info['rate_limit_check'] = {
                    "status": response.status,
                    "data": rate_limit_stats,
                    "timestamp": datetime.now().isoformat()
                }
                logger.info(f"‚úÖ Rate Limit Stats: {response.status}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Rate Limit Stats n√£o dispon√≠vel: {e}")
            self.debug_info['rate_limit_check'] = {"error": str(e)}
        
        logger.info("üîç Verifica√ß√µes de debug conclu√≠das")
        logger.info("=" * 50)
        
        return self.debug_info

    async def send_webhook_message(self, message: str, scenario: str, delay: float = 3.0):
        """Envia mensagem via webhook simulando WhatsApp"""
        message_id = f"wamid.test_{int(time.time())}{random.randint(1000, 9999)}"
        timestamp = str(int(time.time()))
        
        payload = {
            "object": "whatsapp_business_account",
            "entry": [{
                "id": "24386792860950513",
                "changes": [{
                    "value": {
                        "messaging_product": "whatsapp",
                        "metadata": {
                            "display_phone_number": "15550987654",
                            "phone_number_id": "728348237027885"
                        },
                        "contacts": [{
                            "profile": {
                                "name": "Jo√£o Testador Sistema"
                            },
                            "wa_id": TEST_PHONE
                        }],
                        "messages": [{
                            "from": TEST_PHONE,
                            "id": message_id,
                            "timestamp": timestamp,
                            "type": "text",
                            "text": {
                                "body": message
                            }
                        }]
                    },
                    "field": "messages"
                }]
            }]
        }
        
        # Criar assinatura correta para o webhook
        payload_bytes = json.dumps(payload, separators=(',', ':')).encode()
        webhook_secret = "meutoken123"
        signature = hmac.new(webhook_secret.encode(), payload_bytes, hashlib.sha256).hexdigest()
        
        logger.info(f"üì§ [{scenario}] Enviando: {message}")
        logger.debug(f"üîê Assinatura: sha256={signature[:16]}...")
        
        try:
            start_time = time.time()
            async with self.session.post(
                WEBHOOK_URL,
                json=payload,
                headers={
                    "Content-Type": "application/json",
                    "User-Agent": "WhatsApp/2.0",
                    "X-Hub-Signature-256": f"sha256={signature}"
                },
                timeout=aiohttp.ClientTimeout(total=10)  # Timeout mais agressivo
            ) as response:
                response_time = time.time() - start_time
                response_text = await response.text()
                
                logger.info(f"üì® [{scenario}] Status: {response.status} | Tempo: {round(response_time * 1000, 2)}ms")
                if response_time > 2.0:
                    logger.warning(f"‚ö†Ô∏è [{scenario}] Resposta lenta: {response_time:.2f}s")
                
                result = {
                    "scenario": scenario,
                    "message": message,
                    "message_id": message_id,
                    "timestamp": datetime.now().isoformat(),
                    "status_code": response.status,
                    "response_time_ms": round(response_time * 1000, 2),
                    "response_body": response_text,
                    "webhook_payload": payload
                }
                
                self.test_results.append(result)
                
                # Aguardar processamento e poss√≠vel resposta
                if response.status == 200:
                    await asyncio.sleep(delay)
                    # Capturar resposta da LLM do banco com delay adicional
                    await asyncio.sleep(2)  # Delay extra para garantir que a LLM processou
                    await self.capture_llm_response(message, scenario)
                    
                    # REMOVIDO: N√£o reenviar a mensagem do cliente de volta!
                    # O --send-real mostra que as respostas LLM s√£o enviadas automaticamente
                    # if self.send_real_whatsapp:
                    #     await self.send_real_whatsapp_message(message, scenario)
                        
                else:
                    logger.warning(f"‚ö†Ô∏è [{scenario}] Webhook n√£o processado - Status: {response.status}")
                    logger.debug(f"Response body: {response_text[:200]}...")
                
                return result
                
        except Exception as e:
            logger.error(f"‚ùå [{scenario}] Erro ao enviar '{message}': {e}")
            error_result = {
                "scenario": scenario,
                "message": message,
                "timestamp": datetime.now().isoformat(),
                "error": str(e),
                "status_code": 500
            }
            self.test_results.append(error_result)
            return error_result

    async def capture_llm_response(self, sent_message: str, scenario: str):
        """Captura resposta da LLM do banco de dados"""
        if not self.db_conn:
            return
        
        try:
            # Buscar mensagens mais recentes do sistema (√∫ltimos 30 segundos para dar mais margem)
            messages = await self.db_conn.fetch("""
                SELECT m.id, m.direction, m.content, m.created_at,
                       u.wa_id, u.nome
                FROM messages m
                JOIN users u ON m.user_id = u.id
                WHERE u.wa_id = $1 AND m.direction = 'out'
                ORDER BY m.created_at DESC
                LIMIT 5
            """, TEST_PHONE)
            
            for msg in messages:
                # Verificar se √© uma resposta recente (√∫ltimos 30 segundos - mais flex√≠vel)
                now = datetime.now(timezone.utc)
                msg_time = msg['created_at']
                if msg_time.tzinfo is None:
                    msg_time = msg_time.replace(tzinfo=timezone.utc)
                
                time_diff = now - msg_time
                if time_diff.total_seconds() <= 30:  # Aumentado de 10 para 30 segundos
                    
                    # Verificar se j√° capturamos esta resposta
                    already_captured = any(
                        resp.get('message_id') == msg['id'] 
                        for resp in self.llm_responses
                    )
                    
                    if not already_captured:
                        llm_response = {
                            "scenario": scenario,
                            "user_message": sent_message,
                            "llm_response": msg['content'],
                            "message_id": msg['id'],
                            "timestamp": msg['created_at'].isoformat(),
                            "processing_system": "whatsapp_agent",
                            "confidence": 1.0,
                            "processing_time": time_diff.total_seconds()
                        }
                        
                        self.llm_responses.append(llm_response)
                        logger.info(f"ü§ñ [{scenario}] LLM Response capturada: {msg['content']}")  # Resposta completa sem truncar
                        break
                    
        except Exception as e:
            logger.error(f"‚ùå Erro ao capturar resposta LLM: {e}")

    async def send_real_whatsapp_message(self, message: str, scenario: str):
        """
        FUN√á√ÉO DESABILITADA - Era problem√°tica
        
        O teste correto √©:
        1. Cliente (TEST_PHONE) envia mensagem via webhook
        2. Sistema processa e LLM responde automaticamente
        3. LLM envia resposta real para o cliente via WhatsApp
        
        N√£o precisamos reenviar a mensagem do cliente!
        """
        if not self.send_real_whatsapp:
            return None
            
        # Log informativo apenas
        logger.info(f"üì± [{scenario}] Modo real: Sistema enviar√° resposta LLM automaticamente")
        return {"status": "info", "message": "Sistema processa automaticamente"}

    async def test_greeting_flow(self):
        """Cen√°rio 1: Fluxo de sauda√ß√£o e apresenta√ß√£o"""
        logger.info("\nüé¨ CEN√ÅRIO 1: Sauda√ß√£o e Apresenta√ß√£o")
        
        messages = [
            "Ol√°!",
            "Bom dia! Como est√°?",
            "Gostaria de conhecer seus servi√ßos",
            "Voc√™s trabalham com o qu√™?",
            "Que legal! Me conte mais"
        ]
        
        for msg in messages:
            await self.send_webhook_message(msg, "greeting", delay=2.5)

    async def test_service_inquiry_flow(self):
        """Cen√°rio 2: Consulta detalhada de servi√ßos"""
        logger.info("\nüé¨ CEN√ÅRIO 2: Consulta de Servi√ßos")
        
        messages = [
            "Quais servi√ßos voc√™s oferecem?",
            "Quanto custa uma limpeza de pele?",
            "E massagem relaxante, fazem?",
            "Qual a dura√ß√£o da limpeza de pele?",
            "Voc√™s fazem depila√ß√£o tamb√©m?",
            "T√™m algum pacote promocional?",
            "E desconto para primeira vez?"
        ]
        
        for msg in messages:
            await self.send_webhook_message(msg, "service_inquiry", delay=3.0)

    async def test_appointment_booking_flow(self):
        """Cen√°rio 3: Agendamento completo"""
        logger.info("\nüé¨ CEN√ÅRIO 3: Agendamento Completo")
        
        messages = [
            "Quero agendar um hor√°rio",
            "Limpeza de pele profunda",
            "Para quando voc√™s t√™m disponibilidade?",
            "Amanh√£ de manh√£ seria poss√≠vel?",
            "√Äs 10h da manh√£ est√° bom?",
            "Perfeito! Meu nome √© Jo√£o Silva",
            "Meu telefone √© 16 99102-2255",
            "Sim, confirmo o agendamento",
            "Obrigado!"
        ]
        
        for msg in messages:
            await self.send_webhook_message(msg, "appointment_booking", delay=3.5)

    async def test_cancellation_flow(self):
        """Cen√°rio 4: Cancelamento de agendamento"""
        logger.info("\nüé¨ CEN√ÅRIO 4: Cancelamento")
        
        messages = [
            "Oi, preciso cancelar meu agendamento",
            "√â o agendamento de amanh√£ √†s 10h",
            "Surgiu um imprevisto no trabalho",
            "N√£o consigo ir mesmo",
            "Sim, confirmo o cancelamento",
            "Desculpa pelo transtorno"
        ]
        
        for msg in messages:
            await self.send_webhook_message(msg, "cancellation", delay=2.5)

    async def test_reschedule_flow(self):
        """Cen√°rio 5: Reagendamento"""
        logger.info("\nüé¨ CEN√ÅRIO 5: Reagendamento")
        
        messages = [
            "Na verdade, posso reagendar?",
            "Prefiro n√£o cancelar completamente",
            "Que tal na sexta-feira?",
            "De tarde seria melhor",
            "√Äs 14h est√° dispon√≠vel?",
            "Perfeito! Confirmo o reagendamento",
            "Sexta √†s 14h ent√£o"
        ]
        
        for msg in messages:
            await self.send_webhook_message(msg, "reschedule", delay=3.0)

    async def test_positive_feedback_flow(self):
        """Cen√°rio 6: Feedback Positivo"""
        logger.info("\nüé¨ CEN√ÅRIO 6: Feedback Positivo")
        
        messages = [
            "Adorei o atendimento da √∫ltima vez!",
            "A profissional foi muito atenciosa",
            "O resultado ficou excelente",
            "Minha pele melhorou muito",
            "Gostaria de agendar novamente",
            "Voc√™s t√™m programa de fidelidade?",
            "Posso indicar para amigas?",
            "Parab√©ns pela qualidade!"
        ]
        
        for msg in messages:
            await self.send_webhook_message(msg, "positive_feedback", delay=3.0)

    async def test_complex_inquiry_flow(self):
        """Cen√°rio 7: Consulta complexa m√∫ltipla"""
        logger.info("\nüé¨ CEN√ÅRIO 7: Consulta Complexa")
        
        messages = [
            "Estou organizando um evento para minha empresa",
            "Precisamos de servi√ßos para 10 pessoas",
            "Seria um day spa corporativo",
            "Quais pacotes voc√™s recomendam?",
            "Voc√™s fazem desconto para grupos?",
            "E se for num s√°bado, funciona?",
            "Precisaria ser em dezembro",
            "Quanto ficaria o or√ßamento total?"
        ]
        
        for msg in messages:
            await self.send_webhook_message(msg, "complex_inquiry", delay=3.5)

    async def test_business_info_flow(self):
        """Cen√°rio 8: Informa√ß√µes do neg√≥cio"""
        logger.info("\nüé¨ CEN√ÅRIO 8: Informa√ß√µes do Neg√≥cio")
        
        messages = [
            "Voc√™s funcionam aos s√°bados?",
            "E domingo?",
            "Qual o hor√°rio de funcionamento?",
            "Onde voc√™s ficam localizados?",
            "Tem estacionamento?",
            "Como chegar de √¥nibus?",
            "Voc√™s t√™m Instagram?",
            "Aceitam cart√£o?"
        ]
        
        for msg in messages:
            await self.send_webhook_message(msg, "business_info", delay=2.0)

    async def test_multi_topic_flow(self):
        """Cen√°rio 9: Conversa com m√∫ltiplos t√≥picos (fluxo n√£o-linear)"""
        logger.info("\nüé¨ CEN√ÅRIO 9: M√∫ltiplos T√≥picos")
        
        messages = [
            "Oi! Queria saber sobre massagem",
            "Mas antes, voc√™s fazem sobrancelha?",
            "E unhas tamb√©m?",
            "Voltando √† massagem, qual o pre√ßo?",
            "√â relaxante ou tem outras?",
            "Ah, e sobre a sobrancelha...",
            "Voc√™s fazem design?",
            "Ok, mas a massagem √© hoje mesmo?",
            "Prefiro agendar a sobrancelha ent√£o",
            "Para amanh√£ de manh√£"
        ]
        
        for msg in messages:
            await self.send_webhook_message(msg, "multi_topic", delay=2.5)

    async def test_edge_cases_flow(self):
        """Cen√°rio 10: Casos extremos e edge cases"""
        logger.info("\nüé¨ CEN√ÅRIO 10: Casos Extremos")
        
        messages = [
            "asdfghjkl",  # Texto aleat√≥rio
            "üòÄüòÉüòÑüòÅüòÜüòÖüòÇü§£",  # Apenas emojis
            "Quero agendar hoje mesmo!",  # Urg√™ncia positiva
            "voc√™s fazem botox? preenchimento? harmoniza√ß√£o?",  # Servi√ßos n√£o oferecidos
            "123456789",  # Apenas n√∫meros
            ".",  # Apenas ponto
            "oi" * 50,  # Texto repetitivo (reduzido)
            "Quanto custa? E quando? E onde? E como?",  # M√∫ltiplas perguntas
            "Muito obrigado!",  # Gratid√£o positiva
            "Obrigado pela paci√™ncia, at√© logo!"  # Despedida educada
        ]
        
        for msg in messages:
            await self.send_webhook_message(msg, "edge_cases", delay=2.0)

    async def collect_final_metrics(self):
        """Coleta m√©tricas finais do sistema e banco"""
        logger.info("\nüìä COLETANDO M√âTRICAS FINAIS")
        
        metrics = {}
        
        # M√©tricas da API
        endpoints = [
            ("/metrics/system", "system_metrics"),
            ("/conversation/analytics", "conversation_analytics"),
            ("/llm/analytics", "llm_analytics"),
            ("/alerts", "alerts"),
            (f"/conversation/flow/{TEST_PHONE}", "user_flow")
        ]
        
        for endpoint, key in endpoints:
            try:
                async with self.session.get(f"{RAILWAY_URL}{endpoint}") as response:
                    if response.status == 200:
                        data = await response.json()
                        metrics[key] = data
                        logger.debug(f"‚úÖ {key}: coletado")
                    else:
                        logger.warning(f"‚ö†Ô∏è {key}: status {response.status}")
            except Exception as e:
                logger.error(f"‚ùå Erro ao coletar {key}: {e}")
        
        # M√©tricas do banco
        if self.db_conn:
            try:
                # Estat√≠sticas gerais
                db_stats = {}
                tables = ['users', 'messages', 'conversations', 'appointments', 'services']
                
                for table in tables:
                    count = await self.db_conn.fetchval(f"SELECT COUNT(*) FROM {table}")
                    db_stats[table] = count
                
                # Dados espec√≠ficos do usu√°rio teste
                user_data = await self.db_conn.fetchrow("""
                    SELECT u.id, u.wa_id, u.nome, u.created_at,
                           COUNT(m.id) as total_messages,
                           COUNT(CASE WHEN m.direction = 'in' THEN 1 END) as incoming,
                           COUNT(CASE WHEN m.direction = 'out' THEN 1 END) as outgoing
                    FROM users u
                    LEFT JOIN messages m ON u.id = m.user_id
                    WHERE u.wa_id = $1
                    GROUP BY u.id, u.wa_id, u.nome, u.created_at
                """, TEST_PHONE)
                
                # Agendamentos do usu√°rio
                appointments = await self.db_conn.fetch("""
                    SELECT a.*, s.name as service_name, s.price
                    FROM appointments a
                    LEFT JOIN users u ON a.user_id = u.id
                    LEFT JOIN services s ON a.service_id = s.id
                    WHERE u.wa_id = $1
                    ORDER BY a.created_at DESC
                """, TEST_PHONE)
                
                metrics['database'] = {
                    "tables_count": db_stats,
                    "test_user": dict(user_data) if user_data else None,
                    "user_appointments": [dict(apt) for apt in appointments]
                }
                
                logger.info(f"üìä Banco: {sum(db_stats.values())} registros totais")
                
            except Exception as e:
                logger.error(f"‚ùå Erro ao coletar m√©tricas do banco: {e}")
        
        return metrics

    async def generate_comprehensive_report(self, final_metrics):
        """Gera relat√≥rio abrangente"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # Calcular estat√≠sticas
        total_messages = len(self.test_results)
        successful_messages = len([r for r in self.test_results if r.get('status_code') == 200])
        failed_messages = total_messages - successful_messages
        success_rate = (successful_messages / total_messages * 100) if total_messages > 0 else 0
        
        # Agrupar por cen√°rio
        scenarios_stats = {}
        for result in self.test_results:
            scenario = result.get('scenario', 'unknown')
            if scenario not in scenarios_stats:
                scenarios_stats[scenario] = {'total': 0, 'success': 0, 'failed': 0}
            
            scenarios_stats[scenario]['total'] += 1
            if result.get('status_code') == 200:
                scenarios_stats[scenario]['success'] += 1
            else:
                scenarios_stats[scenario]['failed'] += 1
        
        # Relat√≥rio completo
        report = {
            "test_summary": {
                "start_time": self.start_time.isoformat(),
                "end_time": datetime.now().isoformat(),
                "duration_seconds": (datetime.now() - self.start_time).total_seconds(),
                "test_phone": TEST_PHONE,
                "railway_url": RAILWAY_URL,
                "total_messages": total_messages,
                "successful_messages": successful_messages,
                "failed_messages": failed_messages,
                "success_rate_percent": round(success_rate, 2),
                "total_llm_responses": len(self.llm_responses),
                "scenarios_tested": len(scenarios_stats)
            },
            "debug_info": self.debug_info,
            "scenarios_breakdown": scenarios_stats,
            "detailed_results": self.test_results,
            "llm_responses_captured": self.llm_responses,
            "system_metrics": final_metrics
        }
        
        # Salvar JSON detalhado
        json_filename = f"whatsapp_test_complete_{timestamp}.json"
        with open(json_filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False, default=str)
        
        # Relat√≥rio leg√≠vel TXT
        txt_filename = f"whatsapp_test_report_{timestamp}.txt"
        with open(txt_filename, 'w', encoding='utf-8') as f:
            f.write("üß™ RELAT√ìRIO COMPLETO DE TESTE - WHATSAPP AGENT\n")
            f.write("=" * 55 + "\n\n")
            
            # Resumo
            f.write("üìä RESUMO EXECUTIVO\n")
            f.write("-" * 20 + "\n")
            f.write(f"Dura√ß√£o: {report['test_summary']['duration_seconds']:.1f}s\n")
            f.write(f"Mensagens enviadas: {total_messages}\n")
            f.write(f"Taxa de sucesso: {success_rate:.1f}%\n")
            f.write(f"Respostas LLM capturadas: {len(self.llm_responses)}\n")
            f.write(f"Cen√°rios testados: {len(scenarios_stats)}\n\n")
            
            # Por cen√°rio
            f.write("üé¨ RESULTADOS POR CEN√ÅRIO\n")
            f.write("-" * 25 + "\n")
            for scenario, stats in scenarios_stats.items():
                rate = (stats['success'] / stats['total'] * 100) if stats['total'] > 0 else 0
                f.write(f"{scenario}: {stats['success']}/{stats['total']} ({rate:.1f}%)\n")
            f.write("\n")
            
            # Respostas LLM mais relevantes
            f.write("ü§ñ RESPOSTAS LLM PRINCIPAIS\n")
            f.write("-" * 25 + "\n")
            for i, response in enumerate(self.llm_responses, 1):  # Mostrar todas as respostas, n√£o apenas [:15]
                f.write(f"\n{i}. [{response['scenario']}]\n")
                f.write(f"   Usu√°rio: {response['user_message']}\n")
                f.write(f"   LLM: {response['llm_response']}\n")  # Resposta completa sem truncar
                f.write(f"   Sistema: {response.get('processing_system', 'unknown')}\n")
                f.write(f"   Confian√ßa: {response.get('confidence', 0)}\n")
            
            # M√©tricas do sistema
            if final_metrics.get('database'):
                f.write("\n\nüìä M√âTRICAS DO BANCO\n")
                f.write("-" * 20 + "\n")
                db_data = final_metrics['database']
                for table, count in db_data.get('tables_count', {}).items():
                    f.write(f"{table}: {count} registros\n")
                
                if db_data.get('test_user'):
                    user = db_data['test_user']
                    f.write(f"\nUsu√°rio teste: {user.get('nome', 'N/A')}\n")
                    f.write(f"Mensagens: {user.get('total_messages', 0)}\n")
                    f.write(f"Agendamentos: {len(db_data.get('user_appointments', []))}\n")
        
        # Relat√≥rio HTML
        html_filename = f"whatsapp_test_report_{timestamp}.html"
        with open(html_filename, 'w', encoding='utf-8') as f:
            f.write(f"""<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Relat√≥rio WhatsApp Agent - {timestamp}</title>
    <style>
        body {{ font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; padding: 30px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        h1 {{ color: #25D366; text-align: center; margin-bottom: 30px; }}
        h2 {{ color: #075E54; border-bottom: 2px solid #25D366; padding-bottom: 5px; }}
        .summary {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }}
        .metric {{ background: #f8f9fa; padding: 15px; border-radius: 6px; text-align: center; }}
        .metric-value {{ font-size: 2em; font-weight: bold; color: #25D366; }}
        .metric-label {{ color: #666; margin-top: 5px; }}
        .scenario {{ margin: 10px 0; padding: 10px; background: #f8f9fa; border-radius: 4px; }}
        .success {{ color: #28a745; }}
        .partial {{ color: #ffc107; }}
        .failed {{ color: #dc3545; }}
        .llm-response {{ margin: 15px 0; padding: 15px; background: #e8f5e8; border-left: 4px solid #25D366; border-radius: 4px; }}
        .response-header {{ font-weight: bold; color: #075E54; margin-bottom: 8px; }}
        .user-msg {{ background: #dcf8c6; padding: 8px; border-radius: 4px; margin: 5px 0; }}
        .llm-msg {{ background: #ffffff; padding: 8px; border-radius: 4px; margin: 5px 0; border: 1px solid #ddd; }}
        .timestamp {{ color: #666; font-size: 0.8em; }}
        table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}
        th, td {{ padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }}
        th {{ background-color: #f8f9fa; font-weight: bold; }}
        .progress-bar {{ width: 100%; height: 20px; background: #f8f9fa; border-radius: 10px; overflow: hidden; }}
        .progress-fill {{ height: 100%; background: linear-gradient(90deg, #25D366, #128C7E); }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üß™ Relat√≥rio WhatsApp Agent</h1>
        <p style="text-align: center; color: #666; margin-bottom: 30px;">
            Executado em {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}
        </p>
        
        <h2>ÔøΩ Resumo Executivo</h2>
        <div class="summary">
            <div class="metric">
                <div class="metric-value">{total_messages}</div>
                <div class="metric-label">Mensagens Enviadas</div>
            </div>
            <div class="metric">
                <div class="metric-value">{success_rate:.1f}%</div>
                <div class="metric-label">Taxa de Sucesso</div>
            </div>
            <div class="metric">
                <div class="metric-value">{len(self.llm_responses)}</div>
                <div class="metric-label">Respostas LLM</div>
            </div>
            <div class="metric">
                <div class="metric-value">{len(scenarios_stats)}</div>
                <div class="metric-label">Cen√°rios Testados</div>
            </div>
            <div class="metric">
                <div class="metric-value">{report['test_summary']['duration_seconds']:.1f}s</div>
                <div class="metric-label">Dura√ß√£o Total</div>
            </div>
        </div>
        
        <h2>üé¨ Resultados por Cen√°rio</h2>""")
            
            for scenario, stats in scenarios_stats.items():
                rate = (stats['success'] / stats['total'] * 100) if stats['total'] > 0 else 0
                status_class = "success" if rate == 100 else ("partial" if rate > 50 else "failed")
                f.write(f"""
        <div class="scenario">
            <strong>{scenario.replace('_', ' ').title()}</strong>
            <div class="progress-bar" style="margin-top: 8px;">
                <div class="progress-fill" style="width: {rate}%;"></div>
            </div>
            <span class="{status_class}">{stats['success']}/{stats['total']} ({rate:.1f}%)</span>
        </div>""")
            
            f.write(f"""
        
        <h2>ü§ñ Respostas LLM Capturadas</h2>""")
            
            for i, response in enumerate(self.llm_responses, 1):  # Remover [:10] para mostrar todas as respostas
                f.write(f"""
        <div class="llm-response">
            <div class="response-header">#{i} - Cen√°rio: {response['scenario'].replace('_', ' ').title()}</div>
            <div class="user-msg"><strong>üë§ Usu√°rio:</strong> {response['user_message']}</div>
            <div class="llm-msg"><strong>ü§ñ LLM:</strong> {response['llm_response']}</div>  <!-- Resposta completa sem truncar -->
            <div class="timestamp">‚è±Ô∏è Processamento: {response.get('processing_time', 0):.2f}s</div>
        </div>""")
            
            if final_metrics.get('database'):
                db_data = final_metrics['database']
                f.write(f"""
        
        <h2>üìä M√©tricas do Banco de Dados</h2>
        <table>
            <tr><th>Tabela</th><th>Registros</th></tr>""")
                
                for table, count in db_data.get('tables_count', {}).items():
                    f.write(f"<tr><td>{table}</td><td>{count}</td></tr>")
                
                f.write("</table>")
                
                if db_data.get('test_user'):
                    user = db_data['test_user']
                    f.write(f"""
        <h3>üë§ Usu√°rio de Teste</h3>
        <p><strong>Nome:</strong> {user.get('nome', 'N/A')}</p>
        <p><strong>Total de Mensagens:</strong> {user.get('total_messages', 0)}</p>
        <p><strong>Agendamentos:</strong> {len(db_data.get('user_appointments', []))}</p>""")
            
            f.write("""
        
        <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; text-align: center; color: #666;">
            <p>Relat√≥rio gerado automaticamente pelo WhatsApp Agent Test Suite</p>
        </div>
    </div>
</body>
</html>""")
        
        # Relat√≥rio Markdown
        md_filename = f"whatsapp_test_report_{timestamp}.md"
        with open(md_filename, 'w', encoding='utf-8') as f:
            f.write(f"""# üß™ Relat√≥rio WhatsApp Agent

**Data de Execu√ß√£o:** {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}  
**Telefone de Teste:** {TEST_PHONE}  
**URL Railway:** {RAILWAY_URL}

## üìä Resumo Executivo

| M√©trica | Valor |
|---------|--------|
| **Mensagens Enviadas** | {total_messages} |
| **Taxa de Sucesso** | {success_rate:.1f}% |
| **Respostas LLM Capturadas** | {len(self.llm_responses)} |
| **Cen√°rios Testados** | {len(scenarios_stats)} |
| **Dura√ß√£o Total** | {report['test_summary']['duration_seconds']:.1f}s |

## üé¨ Resultados por Cen√°rio

""")
            
            for scenario, stats in scenarios_stats.items():
                rate = (stats['success'] / stats['total'] * 100) if stats['total'] > 0 else 0
                status_emoji = "‚úÖ" if rate == 100 else ("‚ö†Ô∏è" if rate > 50 else "‚ùå")
                f.write(f"- {status_emoji} **{scenario.replace('_', ' ').title()}**: {stats['success']}/{stats['total']} ({rate:.1f}%)\n")
            
            f.write(f"""
## ü§ñ Respostas LLM Principais

""")
            
            for i, response in enumerate(self.llm_responses[:10], 1):
                f.write(f"""### {i}. Cen√°rio: {response['scenario'].replace('_', ' ').title()}

**üë§ Usu√°rio:** {response['user_message']}

**ü§ñ LLM:** {response['llm_response'][:300]}{'...' if len(response['llm_response']) > 300 else ''}

**‚è±Ô∏è Tempo de Processamento:** {response.get('processing_time', 0):.2f}s

---

""")
            
            if final_metrics.get('database'):
                db_data = final_metrics['database']
                f.write(f"""## üìä M√©tricas do Banco de Dados

| Tabela | Registros |
|--------|-----------|
""")
                
                for table, count in db_data.get('tables_count', {}).items():
                    f.write(f"| {table} | {count} |\n")
                
                if db_data.get('test_user'):
                    user = db_data['test_user']
                    f.write(f"""
### üë§ Usu√°rio de Teste

- **Nome:** {user.get('nome', 'N/A')}
- **Total de Mensagens:** {user.get('total_messages', 0)}
- **Agendamentos:** {len(db_data.get('user_appointments', []))}
""")
            
            f.write(f"""
---

*Relat√≥rio gerado automaticamente pelo WhatsApp Agent Test Suite em {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}*
""")
        
        logger.info(f"ÔøΩüìã Relat√≥rio JSON: {json_filename}")
        logger.info(f"üìÑ Relat√≥rio TXT: {txt_filename}")
        logger.info(f"üåê Relat√≥rio HTML: {html_filename}")
        logger.info(f"üìù Relat√≥rio Markdown: {md_filename}")
        logger.info(f"üìù Log detalhado: {log_filename}")
        
        return json_filename, txt_filename, html_filename, md_filename

    async def run_complete_test_suite(self):
        """Executa suite completa de testes"""
        logger.info("üöÄ INICIANDO SUITE COMPLETA DE TESTES")
        logger.info("üéØ Alvo: WhatsApp Agent - Sistema de Beleza")
        logger.info(f"üì± Telefone: {TEST_PHONE}")
        logger.info(f"üåê URL: {RAILWAY_URL}")
        logger.info("=" * 60)
        
        # Debug inicial
        await self.debug_system_check()
        
        # Executar todos os cen√°rios
        test_flows = [
            self.test_greeting_flow,
            self.test_service_inquiry_flow,
            self.test_appointment_booking_flow,
            self.test_cancellation_flow,
            self.test_reschedule_flow,
            self.test_positive_feedback_flow,
            self.test_complex_inquiry_flow,
            self.test_business_info_flow,
            self.test_multi_topic_flow,
            self.test_edge_cases_flow
        ]
        
        for i, flow in enumerate(test_flows, 1):
            try:
                logger.info(f"\n‚ñ∂Ô∏è Executando fluxo {i}/{len(test_flows)}")
                await flow()
                logger.info(f"‚úÖ Fluxo {i} conclu√≠do")
                
                # Pausa entre fluxos
                if i < len(test_flows):
                    logger.info("‚è≥ Pausa entre fluxos...")
                    await asyncio.sleep(5.0)
                    
            except Exception as e:
                logger.error(f"‚ùå Erro no fluxo {i}: {e}")
                continue
        
        # Coletar m√©tricas finais
        final_metrics = await self.collect_final_metrics()
        
        # Gerar relat√≥rios
        json_file, txt_file, html_file, md_file = await self.generate_comprehensive_report(final_metrics)
        
        # Resumo final
        total_messages = len(self.test_results)
        successful_messages = len([r for r in self.test_results if r.get('status_code') == 200])
        success_rate = (successful_messages / total_messages * 100) if total_messages > 0 else 0
        
        logger.info("\nüéØ TESTE COMPLETO FINALIZADO!")
        logger.info("=" * 40)
        logger.info(f"üìä Mensagens enviadas: {total_messages}")
        logger.info(f"‚úÖ Sucessos: {successful_messages} ({success_rate:.1f}%)")
        logger.info(f"ü§ñ Respostas LLM capturadas: {len(self.llm_responses)}")
        logger.info(f"‚è±Ô∏è Dura√ß√£o: {(datetime.now() - self.start_time).total_seconds():.1f}s")
        logger.info(f"üìã Relat√≥rios: {json_file}, {txt_file}, {html_file}, {md_file}")
        
        return final_metrics

async def main(send_real_whatsapp=False):
    """
    Fun√ß√£o principal
    
    Args:
        send_real_whatsapp: Se True, tamb√©m envia mensagens reais via WhatsApp API
    """
    logger.info("üß™ WhatsApp Agent - Suite Completa de Testes")
    logger.info("Desenvolvido para an√°lise abrangente do sistema")
    
    if send_real_whatsapp:
        logger.info("üì± MODO WHATSAPP REAL ATIVADO - Mensagens ser√£o enviadas via API")
        logger.info("‚ö†Ô∏è Certifique-se de que o n√∫mero de teste est√° configurado corretamente")
    
    async with WhatsAppTester(send_real_whatsapp=send_real_whatsapp) as tester:
        result = await tester.run_complete_test_suite()
        return result

if __name__ == "__main__":
    import sys
    
    # Verificar se foi passado argumento para envio real
    send_real = "--send-real" in sys.argv or "--whatsapp-real" in sys.argv
    
    if send_real:
        print("üö® ATEN√á√ÉO: Modo de envio real ativado!")
        print(f"üì± Mensagens ser√£o enviadas para: {TEST_PHONE}")
        confirm = input("Continuar? (s/N): ").strip().lower()
        if confirm != 's':
            print("‚ùå Teste cancelado")
            sys.exit(0)
    
    asyncio.run(main(send_real_whatsapp=send_real))
